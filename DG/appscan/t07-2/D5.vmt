(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool s0)
(define-fun d1 ((x0 Bool) (x7 Bool) (s0.next Bool)) Bool (and (not x0) (not x7) (not s0.next)))
(define-fun d2 ((x0 Bool) (x5 Bool) (s0.next Bool)) Bool (and (not x0) x5 (not s0.next)))
(define-fun d3 ((x0 Bool) (x6 Bool) (s0.next Bool)) Bool (and (not x0) x6 (not s0.next)))
(define-fun d4 ((x0 Bool) (x4 Bool) (s0.next Bool)) Bool (and (not x0) (not x4) (not s0.next)))
(define-fun d5 ((x0 Bool) (x3 Bool) (s0.next Bool)) Bool (and (not x0) x3 (not s0.next)))
(define-fun d6 ((x0 Bool) (x2 Bool) (s0.next Bool)) Bool (and (not x0) x2 (not s0.next)))
(define-fun d7 ((x0 Bool) (x1 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not s0.next)))
(define-fun d8 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x7 s0.next) (d2 x0 x5 s0.next) (d3 x0 x6 s0.next) (d4 x0 x4 s0.next) (d5 x0 x3 s0.next) (d6 x0 x2 s0.next) (d7 x0 x1 s0.next) (d8 x0 s0 s0.next)))
(define-fun d10 ((s0 Bool)) Bool (not s0))
(define-fun d11 ((s0 Bool)) Bool s0)
(define-fun d12 ((s0 Bool)) Bool (or (d10 s0) (d11 s0)))
(define-fun d13 ((s1 Bool)) Bool (not s1))
(define-fun d14 ((x0 Bool) (x3 Bool) (s1.next Bool)) Bool (and (not x0) x3 s1.next))
(define-fun d15 ((x0 Bool) (x4 Bool) (s1.next Bool)) Bool (and (not x0) x4 s1.next))
(define-fun d16 ((x0 Bool) (x5 Bool) (s1.next Bool)) Bool (and (not x0) x5 s1.next))
(define-fun d17 ((x0 Bool) (x6 Bool) (s1.next Bool)) Bool (and (not x0) x6 s1.next))
(define-fun d18 ((x0 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) x7 s1.next))
(define-fun d19 ((x0 Bool) (x2 Bool) (s1.next Bool)) Bool (and (not x0) (not x2) s1.next))
(define-fun d20 ((x0 Bool) (x1 Bool) (s1.next Bool)) Bool (and (not x0) x1 s1.next))
(define-fun d21 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) s1 s1.next))
(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d14 x0 x3 s1.next) (d15 x0 x4 s1.next) (d16 x0 x5 s1.next) (d17 x0 x6 s1.next) (d18 x0 x7 s1.next) (d19 x0 x2 s1.next) (d20 x0 x1 s1.next) (d21 x0 s1 s1.next)))
(define-fun d23 ((s1 Bool)) Bool (not s1))
(define-fun d24 ((s1 Bool)) Bool s1)
(define-fun d25 ((s1 Bool)) Bool (or (d23 s1) (d24 s1)))
(define-fun d26 ((s2 Bool)) Bool s2)
(define-fun d27 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not s2) (not s2.next)))
(define-fun d28 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) s2 (not s2.next)))
(define-fun d29 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d27 x0 s2 s2.next) (d28 x0 s2 s2.next)))
(define-fun d30 ((s2 Bool)) Bool (not s2))
(define-fun d31 ((s3 Bool)) Bool (not s3))
(define-fun d32 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d33 ((s3 Bool)) Bool (not s3))
(define-fun d34 ((s2 Bool) (s3 Bool)) Bool (and (d26 s2) (d31 s3)))
(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d29 x0 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d36 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d32 x0 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d35 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (d36 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d38 ((s2 Bool) (s3 Bool)) Bool (and (d30 s2) (d33 s3)))
(define-fun d39 ((s4 Bool)) Bool (not s4))
(define-fun d40 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d41 ((s4 Bool)) Bool (not s4))
(define-fun d42 ((s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d34 s2 s3) (d39 s4)))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d37 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next))))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d40 x0 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d43 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d44 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d46 ((s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d38 s2 s3) (d41 s4)))
(define-fun d47 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d13 s1) (d42 s2 s3 s4)))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d22 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d45 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d48 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s2.next s3.next s4.next)))
(define-fun d51 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d25 s1) (d46 s2 s3 s4)))
(define-fun d52 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d0 s0) (d47 s1 s2 s3 s4)))
(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d54 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d54 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next)))
(define-fun d56 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d12 s0) (d51 s1 s2 s3 s4)))
;
;
(define-fun I () Bool (! (d52 s0 s1 s2 s3 s4) :init true))
(define-fun T () Bool (! (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) :trans true))
(define-fun O () Bool (! (not (d56 s0 s1 s2 s3 s4)) :invar-property 0))
