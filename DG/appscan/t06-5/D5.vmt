(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool) (s1 Bool)) Bool (and s0 s1))
(define-fun d1 ((x0 Bool) (x3 Bool) (x7 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x3 (not x7) s0.next s1.next))
(define-fun d2 ((x0 Bool) (x6 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x6) s1 s0.next s1.next))
(define-fun d3 ((x0 Bool) (x3 Bool) (x4 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x3 (not x4) s0.next s1.next))
(define-fun d4 ((x0 Bool) (x2 Bool) (x6 Bool) (x7 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x2) (not x6) x7 s0.next s1.next))
(define-fun d5 ((x0 Bool) (x5 Bool) (x6 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x5) x6 s0.next s1.next))
(define-fun d6 ((x0 Bool) (x3 Bool) (x5 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x3) x5 s0.next s1.next))
(define-fun d7 ((x0 Bool) (x2 Bool) (x4 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x2 x4 s0.next s1.next))
(define-fun d8 ((x0 Bool) (x4 Bool) (s0 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x4) (not s0) s0.next s1.next))
(define-fun d9 ((x0 Bool) (x7 Bool) (s0 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x7) s0 s0.next s1.next))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 x5 x6 x7 (not s0.next) (not s1.next)))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) s0.next (not s1.next)))
(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 s0 (not s1) (not s0.next) s1.next))
(define-fun d13 ((x0 Bool) (x1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) (not x1) s0.next s1.next))
(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d1 x0 x3 x7 s0.next s1.next) (d2 x0 x6 s1 s0.next s1.next) (d3 x0 x3 x4 s0.next s1.next) (d4 x0 x2 x6 x7 s0.next s1.next) (d5 x0 x5 x6 s0.next s1.next) (d6 x0 x3 x5 s0.next s1.next) (d7 x0 x2 x4 s0.next s1.next) (d8 x0 x4 s0 s0.next s1.next) (d9 x0 x7 s0 s0.next s1.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0.next s1.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d13 x0 x1 s0.next s1.next)))
(define-fun d15 ((s1 Bool)) Bool (not s1))
(define-fun d16 ((s0 Bool)) Bool s0)
(define-fun d17 ((s0 Bool) (s1 Bool)) Bool (or (d15 s1) (d16 s0)))
(define-fun d18 ((s2 Bool) (s3 Bool)) Bool (and s2 s3))
(define-fun d19 ((x0 Bool) (x4 Bool) (x6 Bool) (s2 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x4 (not x6) s2 s2.next s3.next))
(define-fun d20 ((x0 Bool) (x4 Bool) (x6 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x4) x6 s2.next s3.next))
(define-fun d21 ((x0 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x6) x7 (not s2) s2.next s3.next))
(define-fun d22 ((x0 Bool) (x4 Bool) (x7 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x4) (not x7) s2.next s3.next))
(define-fun d23 ((x0 Bool) (x5 Bool) (x6 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x5) x6 s2.next s3.next))
(define-fun d24 ((x0 Bool) (x2 Bool) (x6 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x2) (not x6) s2.next s3.next))
(define-fun d25 ((x0 Bool) (x6 Bool) (x7 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x6 (not x7) s2.next s3.next))
(define-fun d26 ((x0 Bool) (x6 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x6) s3 s2.next s3.next))
(define-fun d27 ((x0 Bool) (x3 Bool) (x5 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x3) x5 s2.next s3.next))
(define-fun d28 ((x0 Bool) (x2 Bool) (x3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x2 x3 s2.next s3.next))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 x5 x6 x7 (not s2.next) (not s3.next)))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s2) (not s3) s2.next (not s3.next)))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 s2 (not s3) (not s2.next) s3.next))
(define-fun d32 ((x0 Bool) (x1 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) s2.next s3.next))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d19 x0 x4 x6 s2 s2.next s3.next) (d20 x0 x4 x6 s2.next s3.next) (d21 x0 x6 x7 s2 s2.next s3.next) (d22 x0 x4 x7 s2.next s3.next) (d23 x0 x5 x6 s2.next s3.next) (d24 x0 x2 x6 s2.next s3.next) (d25 x0 x6 x7 s2.next s3.next) (d26 x0 x6 s3 s2.next s3.next) (d27 x0 x3 x5 s2.next s3.next) (d28 x0 x2 x3 s2.next s3.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s2.next s3.next) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d32 x0 x1 s2.next s3.next)))
(define-fun d34 ((s3 Bool)) Bool (not s3))
(define-fun d35 ((s2 Bool)) Bool s2)
(define-fun d36 ((s2 Bool) (s3 Bool)) Bool (or (d34 s3) (d35 s2)))
(define-fun d37 ((s4 Bool)) Bool (not s4))
(define-fun d38 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d39 ((s4 Bool)) Bool (not s4))
(define-fun d40 ((s5 Bool)) Bool s5)
(define-fun d41 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d42 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) s5 (not s5.next)))
(define-fun d43 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (or (d41 x0 s5 s5.next) (d42 x0 s5 s5.next)))
(define-fun d44 ((s5 Bool)) Bool (not s5))
(define-fun d45 ((s4 Bool) (s5 Bool)) Bool (and (d37 s4) (d40 s5)))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d38 x0 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s5.next Bool)) Bool (or (d43 x0 s5 s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next))))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d46 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 s5 s5.next)))
(define-fun d49 ((s4 Bool) (s5 Bool)) Bool (and (d39 s4) (d44 s5)))
(define-fun d50 ((s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d18 s2 s3) (d45 s4 s5)))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d33 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next))))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s4.next Bool) (s5.next Bool)) Bool (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s4.next s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next) (= s5 s5.next))))
(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s4.next s5.next)))
(define-fun d54 ((s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d36 s2 s3) (d49 s4 s5)))
(define-fun d55 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d0 s0 s1) (d50 s2 s3 s4 s5)))
(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s5 s2.next s3.next s4.next s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next))))
(define-fun d58 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d56 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s5 s2.next s3.next s4.next s5.next)))
(define-fun d59 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d17 s0 s1) (d54 s2 s3 s4 s5)))
;
;
(define-fun I () Bool (! (d55 s0 s1 s2 s3 s4 s5) :init true))
(define-fun T () Bool (! (d58 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s0.next s1.next s2.next s3.next s4.next s5.next) :trans true))
(define-fun O () Bool (! (not (d59 s0 s1 s2 s3 s4 s5)) :invar-property 0))
