(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
(declare-fun s8 () Bool)
(declare-fun s8.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
(define-fun nxt15 () Bool (! s7 :next s7.next))
(define-fun nxt16 () Bool (! s8 :next s8.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s0 Bool) (s1 Bool)) Bool (and (not s0) s1))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 x5 x6 x7 (not s0) s1 s0.next s1.next))
(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) x4 (not x5) (not x6) (not x7) s0 s1 (not s0.next) (not s1.next)))
(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) (not s1) s0.next (not s1.next)))
(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d8 ((s0 Bool) (s1 Bool)) Bool (and s0 (not s1)))
(define-fun d9 ((s0 Bool) (s2 Bool)) Bool (and (not s2) (d0 s0)))
(define-fun d10 ((x0 Bool) (s0 Bool) (s2 Bool) (s0.next Bool) (s2.next Bool)) Bool (and (not s2) (not s2.next) (d1 x0 s0 s0.next)))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and s2 s2.next (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s2) s2.next (d2 s0) (d3 s0.next s1.next)))
(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d10 x0 s0 s2 s0.next s2.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s2 s0.next s1.next s2.next)))
(define-fun d14 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and s2 (d8 s0 s1)))
(define-fun d15 ((s3 Bool)) Bool (not s3))
(define-fun d16 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d17 ((s3 Bool)) Bool (not s3))
(define-fun d18 ((s4 Bool)) Bool s4)
(define-fun d19 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d20 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) s4 (not s4.next)))
(define-fun d21 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d19 x0 s4 s4.next) (d20 x0 s4 s4.next)))
(define-fun d22 ((s4 Bool)) Bool (not s4))
(define-fun d23 ((s3 Bool) (s4 Bool)) Bool (and (d15 s3) (d18 s4)))
(define-fun d24 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d16 x0 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d21 x0 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d24 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next) (d25 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d27 ((s3 Bool) (s4 Bool)) Bool (and (d17 s3) (d22 s4)))
(define-fun d28 ((s0 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d9 s0 s2) (d23 s3 s4)))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next))))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d26 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next) (= s4 s4.next))))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))
(define-fun d32 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d14 s0 s1 s2) (d27 s3 s4)))
(define-fun d33 ((s5 Bool)) Bool (not s5))
(define-fun d34 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d35 ((s5 Bool)) Bool (not s5))
(define-fun d36 ((s5 Bool) (s6 Bool)) Bool (and (not s5) s6))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 x5 x6 x7 (not s5) s6 s5.next s6.next))
(define-fun d38 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) s5 s6 (not s5.next) (not s6.next)))
(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s5) (not s6) s5.next (not s6.next)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (or (d37 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next) (d38 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next) (d39 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next)))
(define-fun d41 ((s5 Bool) (s6 Bool)) Bool (and s5 (not s6)))
(define-fun d42 ((s5 Bool) (s7 Bool)) Bool (and (not s7) (d33 s5)))
(define-fun d43 ((x0 Bool) (s5 Bool) (s7 Bool) (s5.next Bool) (s7.next Bool)) Bool (and (not s7) (not s7.next) (d34 x0 s5 s5.next)))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and s7 s7.next (d40 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next)))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s7) s7.next (d35 s5) (d36 s5.next s6.next)))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d43 x0 s5 s7 s5.next s7.next) (d44 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s5 s7 s5.next s6.next s7.next)))
(define-fun d47 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and s7 (d41 s5 s6)))
(define-fun d48 ((s8 Bool)) Bool (not s8))
(define-fun d49 ((x0 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not s8) (not s8.next)))
(define-fun d50 ((s8 Bool)) Bool (not s8))
(define-fun d51 ((s5 Bool) (s7 Bool) (s8 Bool)) Bool (and (d42 s5 s7) (d48 s8)))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next))))
(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s8.next Bool)) Bool (or (d49 x0 s8 s8.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s8 s8.next))))
(define-fun d54 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool)) Bool (and (d52 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d53 x0 x1 x2 x3 x4 x5 x6 x7 s8 s8.next)))
(define-fun d55 ((s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (d47 s5 s6 s7) (d50 s8)))
(define-fun d56 ((s0 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s7 Bool) (s8 Bool)) Bool (and (d28 s0 s2 s3 s4) (d51 s5 s7 s8)))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d58 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool)) Bool (or (d54 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s8 s5.next s6.next s7.next s8.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next))))
(define-fun d59 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool)) Bool (and (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d58 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s8 s5.next s6.next s7.next s8.next)))
(define-fun d60 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (d32 s0 s1 s2 s3 s4) (d55 s5 s6 s7 s8)))
;
(define-fun d61 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (d60 s0 s1 s2 s3 s4 s5 s6 s7 s8)))
(define-fun d62 ((s0 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s7 Bool) (s8 Bool)) Bool (and (d56 s0 s2 s3 s4 s5 s7 s8)))
;
(define-fun I () Bool (! (d62 s0 s2 s3 s4 s5 s7 s8) :init true))
(define-fun T () Bool (! (d59 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) :trans true))
(define-fun O () Bool (! (not (d61 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0))
