(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool) (s1 Bool)) Bool (and (not s0) s1))
(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 x5 x6 x7 (not s0) s1 s0.next s1.next))
(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) s0 s1 (not s0.next) (not s1.next)))
(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) (not s1) s0.next (not s1.next)))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d5 ((s0 Bool) (s1 Bool)) Bool (and s0 (not s1)))
(define-fun d6 ((s2 Bool)) Bool (not s2))
(define-fun d7 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not s2) (not s2.next)))
(define-fun d8 ((s2 Bool)) Bool (not s2))
(define-fun d9 ((s3 Bool)) Bool s3)
(define-fun d10 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d11 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) s3 (not s3.next)))
(define-fun d12 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d10 x0 s3 s3.next) (d11 x0 s3 s3.next)))
(define-fun d13 ((s3 Bool)) Bool (not s3))
(define-fun d14 ((s2 Bool) (s3 Bool)) Bool (and (d6 s2) (d9 s3)))
(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d7 x0 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d12 x0 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d15 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d18 ((s2 Bool) (s3 Bool)) Bool (and (d8 s2) (d13 s3)))
(define-fun d19 ((s4 Bool)) Bool (not s4))
(define-fun d20 () Bool false)
(define-fun d21 ((s4 Bool)) Bool (not s4))
(define-fun d22 ((s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d14 s2 s3) (d19 s4)))
(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d17 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next))))
(define-fun d24 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or d20 (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d24 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d26 ((s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d18 s2 s3) (d21 s4)))
(define-fun d27 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d0 s0 s1) (d22 s2 s3 s4)))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d28 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s4 s2.next s3.next s4.next)))
(define-fun d31 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d5 s0 s1) (d26 s2 s3 s4)))
;
;
(define-fun I () Bool (! (d27 s0 s1 s2 s3 s4) :init true))
(define-fun T () Bool (! (d30 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) :trans true))
(define-fun O () Bool (! (not (d31 s0 s1 s2 s3 s4)) :invar-property 0))
