(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
(declare-fun n0 () Int)
(declare-fun n0.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
(define-fun nxt15 () Bool (! s7 :next s7.next))
(define-fun nxt16 () Bool (! n0 :next n0.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool s1)
(define-fun d4 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d5 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) s1 (not s1.next)))
(define-fun d6 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d4 x0 s1 s1.next) (d5 x0 s1 s1.next)))
(define-fun d7 ((s1 Bool)) Bool (not s1))
(define-fun d8 ((s0 Bool) (s1 Bool)) Bool (and (d0 s0) (d3 s1)))
(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d6 x0 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d12 ((s0 Bool) (s1 Bool)) Bool (and (d2 s0) (d7 s1)))
(define-fun d13 ((s0 Bool)) Bool (not s0))
(define-fun d14 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d15 ((s0 Bool)) Bool (not s0))
(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))
(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))
(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (n0 Int) (s0.next Bool) (n0.next Int)) Bool (and (d14 x0 s0 s0.next) (or (d16 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))
(define-fun d19 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s1) (not s2) (not s3) s4))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x7) (not s1) s2 (not s3) (not s4) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))
(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x6) x7 (not s1) s2 (not s3) (not s4) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))
(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x5) x6 (not s1) s2 (not s3) (not s4) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))
(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not s1) s2 (not s3) (not s4) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))
(define-fun d24 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) x4 x5 (not x6) (not x7) (not s1) s2 s3 s4 s1.next (not s2.next) s3.next s4.next))
(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) s1 (not s2) s3 (not s4) s1.next (not s2.next) (not s3.next) s4.next))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) x6 x7 s1 (not s2) (not s3) s4 s1.next s2.next (not s3.next) s4.next))
(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 s1 (not s2) s3 s4 (not s1.next) s2.next s3.next (not s4.next)))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) s1 s2 (not s3) s4 (not s1.next) s2.next s3.next s4.next))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x6 x7 (not s1) (not s2) (not s3) s4 (not s1.next) (not s2.next) s3.next (not s4.next)))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s1) s2 (not s3) s4 (not s1.next) s2.next (not s3.next) (not s4.next)))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s1) (not s2) s3 s4 s1.next (not s2.next) s3.next (not s4.next)))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) x6 x7 (not s1) (not s2) s3 (not s4) s1.next (not s2.next) (not s3.next) (not s4.next)))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 s1 (not s2) (not s3) (not s4) (not s1.next) (not s2.next) s3.next s4.next))
(define-fun d34 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 x6 (not x7) (not s1) s2 s3 (not s4) s1.next s2.next (not s3.next) (not s4.next)))
(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 x6 x7 s1 s2 (not s3) (not s4) (not s1.next) s2.next (not s3.next) s4.next))
(define-fun d36 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d20 x0 x1 x2 x3 x4 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d21 x0 x1 x2 x3 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d22 x0 x1 x2 x3 x5 x6 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d23 x0 x1 x2 x3 x4 x5 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d24 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d25 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d28 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d29 x0 x1 x2 x3 x4 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d32 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d33 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d34 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next)))
(define-fun d37 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s1) (not s2) (not s3) (not s4)))
(define-fun d38 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d13 s0) (d19 s1 s2 s3 s4)))
(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (n0 Int) (s0.next Bool) (n0.next Int)) Bool (or (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 n0 s0.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= n0 n0.next))))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d36 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 n0 s0.next n0.next) (d40 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s1.next s2.next s3.next s4.next)))
(define-fun d42 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d15 s0) (d37 s1 s2 s3 s4)))
(define-fun d43 ((s0 Bool)) Bool (not s0))
(define-fun d44 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d45 ((s0 Bool)) Bool (not s0))
(define-fun d46 ((s1 Bool)) Bool (not s1))
(define-fun d47 () Bool false)
(define-fun d48 ((s1 Bool)) Bool (not s1))
(define-fun d49 ((s0 Bool) (s1 Bool)) Bool (and (d43 s0) (d46 s1)))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d44 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or d47 (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d53 ((s0 Bool) (s1 Bool)) Bool (and (d45 s0) (d48 s1)))
(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (not s5) (d38 s0 s1 s2 s3 s4)))
(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (and (not s5) (not s5.next) (d41 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)))
(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s5 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s5.next Bool) (n0.next Int)) Bool (and s5 s5.next (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (= n0 n0.next)))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s5.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s5) s5.next (d42 s0 s1 s2 s3 s4) (d49 s0.next s1.next) (= n0 n0.next)))
(define-fun d58 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (or (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 n0 s0.next s1.next s2.next s3.next s4.next s5.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s5 n0 s0.next s1.next s5.next n0.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 n0 s0.next s1.next s5.next n0.next)))
(define-fun d59 ((s0 Bool) (s1 Bool) (s5 Bool)) Bool (and s5 (d53 s0 s1)))
(define-fun d60 ((s0 Bool) (s1 Bool) (s6 Bool)) Bool (and (not s6) (d8 s0 s1)))
(define-fun d61 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s6 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s6.next Bool) (n0.next Int)) Bool (and (not s6) (not s6.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (= n0 n0.next)))
(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (n0.next Int)) Bool (and s6 s6.next (d58 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 n0 s0.next s1.next s2.next s3.next s4.next s5.next n0.next)))
(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s6 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s6) s6.next (d12 s0 s1) (d54 s0.next s1.next s2.next s3.next s4.next s5.next) (= n0 n0.next)))
(define-fun d64 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (n0.next Int)) Bool (or (d61 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s6 n0 s0.next s1.next s6.next n0.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next n0.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s6 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next n0.next)))
(define-fun d65 ((s0 Bool) (s1 Bool) (s5 Bool) (s6 Bool)) Bool (and s6 (d59 s0 s1 s5)))
(define-fun d66 ((s7 Bool)) Bool (not s7))
(define-fun d67 ((x0 Bool) (s7 Bool) (s7.next Bool)) Bool (and (not x0) (not s7) (not s7.next)))
(define-fun d68 ((s7 Bool)) Bool (not s7))
(define-fun d69 ((s0 Bool) (s1 Bool) (s6 Bool) (s7 Bool)) Bool (and (d60 s0 s1 s6) (d66 s7)))
(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (n0.next Int)) Bool (or (d64 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= n0 n0.next))))
(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s7 Bool) (s7.next Bool)) Bool (or (d67 x0 s7 s7.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s7 s7.next))))
(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s7 s7.next)))
(define-fun d73 ((s0 Bool) (s1 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (d65 s0 s1 s5 s6) (d68 s7)))
;
;
(define-fun I () Bool (! (d69 s0 s1 s6 s7) :init true))
(define-fun T () Bool (! (d72 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next n0.next) :trans true))
(define-fun O () Bool (! (not (d73 s0 s1 s5 s6 s7)) :invar-property 0))
