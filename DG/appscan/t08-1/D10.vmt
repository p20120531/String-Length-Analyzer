(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
(define-fun nxt15 () Bool (! s7 :next s7.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s1) (not s1.next)))
(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 (not s1) (not s1.next)))
(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d4 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d7 ((s1 Bool)) Bool (not s1))
(define-fun d8 ((s0 Bool) (s1 Bool)) Bool (and (d0 s0) (d3 s1)))
(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d6 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d12 ((s0 Bool) (s1 Bool)) Bool (and (d2 s0) (d7 s1)))
(define-fun d13 ((s0 Bool)) Bool (not s0))
(define-fun d14 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d15 ((s0 Bool)) Bool (not s0))
(define-fun d16 ((s1 Bool)) Bool (not s1))
(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s1.next))
(define-fun d18 ((x0 Bool) (x3 Bool) (s1.next Bool)) Bool (and (not x0) x3 (not s1.next)))
(define-fun d19 ((x0 Bool) (x4 Bool) (s1.next Bool)) Bool (and (not x0) x4 (not s1.next)))
(define-fun d20 ((x0 Bool) (x5 Bool) (s1.next Bool)) Bool (and (not x0) x5 (not s1.next)))
(define-fun d21 ((x0 Bool) (x6 Bool) (s1.next Bool)) Bool (and (not x0) x6 (not s1.next)))
(define-fun d22 ((x0 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) x7 (not s1.next)))
(define-fun d23 ((x0 Bool) (x2 Bool) (s1.next Bool)) Bool (and (not x0) (not x2) (not s1.next)))
(define-fun d24 ((x0 Bool) (x1 Bool) (s1.next Bool)) Bool (and (not x0) x1 (not s1.next)))
(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1.next Bool)) Bool (or (d17 x0 x1 x2 x3 x4 x5 x6 x7 s1.next) (d18 x0 x3 s1.next) (d19 x0 x4 s1.next) (d20 x0 x5 s1.next) (d21 x0 x6 s1.next) (d22 x0 x7 s1.next) (d23 x0 x2 s1.next) (d24 x0 x1 s1.next)))
(define-fun d26 ((s1 Bool)) Bool (not s1))
(define-fun d27 ((s0 Bool) (s1 Bool)) Bool (and (d13 s0) (d16 s1)))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d14 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d28 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d31 ((s0 Bool) (s1 Bool)) Bool (and (d15 s0) (d26 s1)))
(define-fun d32 ((s2 Bool)) Bool (not s2))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 s2.next))
(define-fun d34 ((x0 Bool) (x7 Bool) (s2.next Bool)) Bool (and (not x0) (not x7) (not s2.next)))
(define-fun d35 ((x0 Bool) (x5 Bool) (s2.next Bool)) Bool (and (not x0) x5 (not s2.next)))
(define-fun d36 ((x0 Bool) (x6 Bool) (s2.next Bool)) Bool (and (not x0) x6 (not s2.next)))
(define-fun d37 ((x0 Bool) (x4 Bool) (s2.next Bool)) Bool (and (not x0) (not x4) (not s2.next)))
(define-fun d38 ((x0 Bool) (x3 Bool) (s2.next Bool)) Bool (and (not x0) x3 (not s2.next)))
(define-fun d39 ((x0 Bool) (x2 Bool) (s2.next Bool)) Bool (and (not x0) x2 (not s2.next)))
(define-fun d40 ((x0 Bool) (x1 Bool) (s2.next Bool)) Bool (and (not x0) x1 (not s2.next)))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2.next Bool)) Bool (or (d33 x0 x1 x2 x3 x4 x5 x6 x7 s2.next) (d34 x0 x7 s2.next) (d35 x0 x5 s2.next) (d36 x0 x6 s2.next) (d37 x0 x4 s2.next) (d38 x0 x3 s2.next) (d39 x0 x2 s2.next) (d40 x0 x1 s2.next)))
(define-fun d42 ((s2 Bool)) Bool (not s2))
(define-fun d43 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d27 s0 s1) (d32 s2)))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d30 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d41 x0 x1 x2 x3 x4 x5 x6 x7 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d47 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d31 s0 s1) (d42 s2)))
(define-fun d48 ((s3 Bool)) Bool s3)
(define-fun d49 ((x0 Bool) (x7 Bool) (s3.next Bool)) Bool (and (not x0) (not x7) (not s3.next)))
(define-fun d50 ((x0 Bool) (x5 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3.next)))
(define-fun d51 ((x0 Bool) (x6 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3.next)))
(define-fun d52 ((x0 Bool) (x4 Bool) (s3.next Bool)) Bool (and (not x0) (not x4) (not s3.next)))
(define-fun d53 ((x0 Bool) (x3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3.next)))
(define-fun d54 ((x0 Bool) (x2 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3.next)))
(define-fun d55 ((x0 Bool) (x1 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not s3.next)))
(define-fun d56 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d49 x0 x7 s3.next) (d50 x0 x5 s3.next) (d51 x0 x6 s3.next) (d52 x0 x4 s3.next) (d53 x0 x3 s3.next) (d54 x0 x2 s3.next) (d55 x0 x1 s3.next) (d56 x0 s3 s3.next)))
(define-fun d58 ((s3 Bool)) Bool (not s3))
(define-fun d59 ((s3 Bool)) Bool s3)
(define-fun d60 ((s3 Bool)) Bool (or (d58 s3) (d59 s3)))
(define-fun d61 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d43 s0 s1 s2) (d48 s3)))
(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next))))
(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d57 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d64 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d62 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d65 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d47 s0 s1 s2) (d60 s3)))
(define-fun d66 ((s4 Bool)) Bool (not s4))
(define-fun d67 ((x0 Bool) (x3 Bool) (s4.next Bool)) Bool (and (not x0) x3 s4.next))
(define-fun d68 ((x0 Bool) (x4 Bool) (s4.next Bool)) Bool (and (not x0) x4 s4.next))
(define-fun d69 ((x0 Bool) (x5 Bool) (s4.next Bool)) Bool (and (not x0) x5 s4.next))
(define-fun d70 ((x0 Bool) (x6 Bool) (s4.next Bool)) Bool (and (not x0) x6 s4.next))
(define-fun d71 ((x0 Bool) (x7 Bool) (s4.next Bool)) Bool (and (not x0) x7 s4.next))
(define-fun d72 ((x0 Bool) (x2 Bool) (s4.next Bool)) Bool (and (not x0) (not x2) s4.next))
(define-fun d73 ((x0 Bool) (x1 Bool) (s4.next Bool)) Bool (and (not x0) x1 s4.next))
(define-fun d74 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) s4 s4.next))
(define-fun d75 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d67 x0 x3 s4.next) (d68 x0 x4 s4.next) (d69 x0 x5 s4.next) (d70 x0 x6 s4.next) (d71 x0 x7 s4.next) (d72 x0 x2 s4.next) (d73 x0 x1 s4.next) (d74 x0 s4 s4.next)))
(define-fun d76 ((s4 Bool)) Bool (not s4))
(define-fun d77 ((s4 Bool)) Bool s4)
(define-fun d78 ((s4 Bool)) Bool (or (d76 s4) (d77 s4)))
(define-fun d79 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d61 s0 s1 s2 s3) (d66 s4)))
(define-fun d80 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d64 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d81 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d75 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d82 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d80 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d81 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d83 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d65 s0 s1 s2 s3) (d78 s4)))
(define-fun d84 ((s5 Bool)) Bool (not s5))
(define-fun d85 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d86 ((s5 Bool)) Bool (not s5))
(define-fun d87 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d79 s0 s1 s2 s3 s4) (d84 s5)))
(define-fun d88 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d82 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d89 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s5.next Bool)) Bool (or (d85 x0 s5 s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next))))
(define-fun d90 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d88 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d89 x0 x1 x2 x3 x4 x5 x6 x7 s5 s5.next)))
(define-fun d91 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d83 s0 s1 s2 s3 s4) (d86 s5)))
(define-fun d92 ((s0 Bool)) Bool (not s0))
(define-fun d93 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d94 ((s0 Bool)) Bool (not s0))
(define-fun d95 ((s1 Bool)) Bool (not s1))
(define-fun d96 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s1) (not s1.next)))
(define-fun d97 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 (not s1) (not s1.next)))
(define-fun d98 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d96 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d97 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d99 ((s1 Bool)) Bool (not s1))
(define-fun d100 ((s0 Bool) (s1 Bool)) Bool (and (d92 s0) (d95 s1)))
(define-fun d101 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d93 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d102 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d103 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d101 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d102 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d104 ((s0 Bool) (s1 Bool)) Bool (and (d94 s0) (d99 s1)))
(define-fun d105 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool)) Bool (and (not s6) (d87 s0 s1 s2 s3 s4 s5)))
(define-fun d106 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not s6) (not s6.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s0.next s1.next s2.next s3.next s4.next s5.next)))
(define-fun d107 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s6.next Bool)) Bool (and s6 s6.next (d103 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d108 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s6.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s6) s6.next (d91 s0 s1 s2 s3 s4 s5) (d100 s0.next s1.next)))
(define-fun d109 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (or (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s2.next s3.next s4.next s5.next s6.next) (d107 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s6 s0.next s1.next s6.next) (d108 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s6.next)))
(define-fun d110 ((s0 Bool) (s1 Bool) (s6 Bool)) Bool (and s6 (d104 s0 s1)))
(define-fun d111 ((s0 Bool) (s1 Bool) (s7 Bool)) Bool (and (not s7) (d8 s0 s1)))
(define-fun d112 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s7.next Bool)) Bool (and (not s7) (not s7.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d113 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and s7 s7.next (d109 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s2.next s3.next s4.next s5.next s6.next)))
(define-fun d114 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s7) s7.next (d12 s0 s1) (d105 s0.next s1.next s2.next s3.next s4.next s5.next s6.next)))
(define-fun d115 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s7 s0.next s1.next s7.next) (d113 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d114 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next)))
(define-fun d116 ((s0 Bool) (s1 Bool) (s6 Bool) (s7 Bool)) Bool (and s7 (d110 s0 s1 s6)))
;
;
(define-fun I () Bool (! (d111 s0 s1 s7) :init true))
(define-fun T () Bool (! (d115 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) :trans true))
(define-fun O () Bool (! (not (d116 s0 s1 s6 s7)) :invar-property 0))
