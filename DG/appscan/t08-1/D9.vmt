(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s1.next))
(define-fun d5 ((x0 Bool) (x3 Bool) (s1.next Bool)) Bool (and (not x0) x3 (not s1.next)))
(define-fun d6 ((x0 Bool) (x4 Bool) (s1.next Bool)) Bool (and (not x0) x4 (not s1.next)))
(define-fun d7 ((x0 Bool) (x5 Bool) (s1.next Bool)) Bool (and (not x0) x5 (not s1.next)))
(define-fun d8 ((x0 Bool) (x6 Bool) (s1.next Bool)) Bool (and (not x0) x6 (not s1.next)))
(define-fun d9 ((x0 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) x7 (not s1.next)))
(define-fun d10 ((x0 Bool) (x2 Bool) (s1.next Bool)) Bool (and (not x0) (not x2) (not s1.next)))
(define-fun d11 ((x0 Bool) (x1 Bool) (s1.next Bool)) Bool (and (not x0) x1 (not s1.next)))
(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1.next Bool)) Bool (or (d4 x0 x1 x2 x3 x4 x5 x6 x7 s1.next) (d5 x0 x3 s1.next) (d6 x0 x4 s1.next) (d7 x0 x5 s1.next) (d8 x0 x6 s1.next) (d9 x0 x7 s1.next) (d10 x0 x2 s1.next) (d11 x0 x1 s1.next)))
(define-fun d13 ((s1 Bool)) Bool (not s1))
(define-fun d14 ((s0 Bool) (s1 Bool)) Bool (and (d0 s0) (d3 s1)))
(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d12 x0 x1 x2 x3 x4 x5 x6 x7 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d18 ((s0 Bool) (s1 Bool)) Bool (and (d2 s0) (d13 s1)))
(define-fun d19 ((s2 Bool)) Bool (not s2))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 s2.next))
(define-fun d21 ((x0 Bool) (x7 Bool) (s2.next Bool)) Bool (and (not x0) (not x7) (not s2.next)))
(define-fun d22 ((x0 Bool) (x5 Bool) (s2.next Bool)) Bool (and (not x0) x5 (not s2.next)))
(define-fun d23 ((x0 Bool) (x6 Bool) (s2.next Bool)) Bool (and (not x0) x6 (not s2.next)))
(define-fun d24 ((x0 Bool) (x4 Bool) (s2.next Bool)) Bool (and (not x0) (not x4) (not s2.next)))
(define-fun d25 ((x0 Bool) (x3 Bool) (s2.next Bool)) Bool (and (not x0) x3 (not s2.next)))
(define-fun d26 ((x0 Bool) (x2 Bool) (s2.next Bool)) Bool (and (not x0) x2 (not s2.next)))
(define-fun d27 ((x0 Bool) (x1 Bool) (s2.next Bool)) Bool (and (not x0) x1 (not s2.next)))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2.next Bool)) Bool (or (d20 x0 x1 x2 x3 x4 x5 x6 x7 s2.next) (d21 x0 x7 s2.next) (d22 x0 x5 s2.next) (d23 x0 x6 s2.next) (d24 x0 x4 s2.next) (d25 x0 x3 s2.next) (d26 x0 x2 s2.next) (d27 x0 x1 s2.next)))
(define-fun d29 ((s2 Bool)) Bool (not s2))
(define-fun d30 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d14 s0 s1) (d19 s2)))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d28 x0 x1 x2 x3 x4 x5 x6 x7 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d32 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d34 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d18 s0 s1) (d29 s2)))
(define-fun d35 ((s3 Bool)) Bool s3)
(define-fun d36 ((x0 Bool) (x7 Bool) (s3.next Bool)) Bool (and (not x0) (not x7) (not s3.next)))
(define-fun d37 ((x0 Bool) (x5 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3.next)))
(define-fun d38 ((x0 Bool) (x6 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3.next)))
(define-fun d39 ((x0 Bool) (x4 Bool) (s3.next Bool)) Bool (and (not x0) (not x4) (not s3.next)))
(define-fun d40 ((x0 Bool) (x3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3.next)))
(define-fun d41 ((x0 Bool) (x2 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3.next)))
(define-fun d42 ((x0 Bool) (x1 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not s3.next)))
(define-fun d43 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d36 x0 x7 s3.next) (d37 x0 x5 s3.next) (d38 x0 x6 s3.next) (d39 x0 x4 s3.next) (d40 x0 x3 s3.next) (d41 x0 x2 s3.next) (d42 x0 x1 s3.next) (d43 x0 s3 s3.next)))
(define-fun d45 ((s3 Bool)) Bool (not s3))
(define-fun d46 ((s3 Bool)) Bool s3)
(define-fun d47 ((s3 Bool)) Bool (or (d45 s3) (d46 s3)))
(define-fun d48 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d30 s0 s1 s2) (d35 s3)))
(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d33 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next))))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d44 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d49 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d52 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d34 s0 s1 s2) (d47 s3)))
(define-fun d53 ((s4 Bool)) Bool (not s4))
(define-fun d54 ((x0 Bool) (x3 Bool) (s4.next Bool)) Bool (and (not x0) x3 s4.next))
(define-fun d55 ((x0 Bool) (x4 Bool) (s4.next Bool)) Bool (and (not x0) x4 s4.next))
(define-fun d56 ((x0 Bool) (x5 Bool) (s4.next Bool)) Bool (and (not x0) x5 s4.next))
(define-fun d57 ((x0 Bool) (x6 Bool) (s4.next Bool)) Bool (and (not x0) x6 s4.next))
(define-fun d58 ((x0 Bool) (x7 Bool) (s4.next Bool)) Bool (and (not x0) x7 s4.next))
(define-fun d59 ((x0 Bool) (x2 Bool) (s4.next Bool)) Bool (and (not x0) (not x2) s4.next))
(define-fun d60 ((x0 Bool) (x1 Bool) (s4.next Bool)) Bool (and (not x0) x1 s4.next))
(define-fun d61 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) s4 s4.next))
(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d54 x0 x3 s4.next) (d55 x0 x4 s4.next) (d56 x0 x5 s4.next) (d57 x0 x6 s4.next) (d58 x0 x7 s4.next) (d59 x0 x2 s4.next) (d60 x0 x1 s4.next) (d61 x0 s4 s4.next)))
(define-fun d63 ((s4 Bool)) Bool (not s4))
(define-fun d64 ((s4 Bool)) Bool s4)
(define-fun d65 ((s4 Bool)) Bool (or (d63 s4) (d64 s4)))
(define-fun d66 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d48 s0 s1 s2 s3) (d53 s4)))
(define-fun d67 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d51 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d68 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d62 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d67 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d68 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d70 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d52 s0 s1 s2 s3) (d65 s4)))
(define-fun d71 ((s5 Bool)) Bool (not s5))
(define-fun d72 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d73 ((s5 Bool)) Bool (not s5))
(define-fun d74 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d66 s0 s1 s2 s3 s4) (d71 s5)))
(define-fun d75 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d76 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s5.next Bool)) Bool (or (d72 x0 s5 s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next))))
(define-fun d77 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d75 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d76 x0 x1 x2 x3 x4 x5 x6 x7 s5 s5.next)))
(define-fun d78 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d70 s0 s1 s2 s3 s4) (d73 s5)))
(define-fun d79 ((s0 Bool)) Bool (not s0))
(define-fun d80 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d81 ((s0 Bool)) Bool (not s0))
(define-fun d82 ((s1 Bool)) Bool (not s1))
(define-fun d83 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s1) (not s1.next)))
(define-fun d84 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 (not s1) (not s1.next)))
(define-fun d85 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d83 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d86 ((s1 Bool)) Bool (not s1))
(define-fun d87 ((s0 Bool) (s1 Bool)) Bool (and (d79 s0) (d82 s1)))
(define-fun d88 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d80 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d89 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d85 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d90 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d88 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d89 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d91 ((s0 Bool) (s1 Bool)) Bool (and (d81 s0) (d86 s1)))
(define-fun d92 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool)) Bool (and (not s6) (d74 s0 s1 s2 s3 s4 s5)))
(define-fun d93 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not s6) (not s6.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s0.next s1.next s2.next s3.next s4.next s5.next)))
(define-fun d94 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s6.next Bool)) Bool (and s6 s6.next (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d95 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s6.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s6) s6.next (d78 s0 s1 s2 s3 s4 s5) (d87 s0.next s1.next)))
(define-fun d96 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (or (d93 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s2.next s3.next s4.next s5.next s6.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s6 s0.next s1.next s6.next) (d95 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s6.next)))
(define-fun d97 ((s0 Bool) (s1 Bool) (s6 Bool)) Bool (and s6 (d91 s0 s1)))
;
;
(define-fun I () Bool (! (d92 s0 s1 s2 s3 s4 s5 s6) :init true))
(define-fun T () Bool (! (d96 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s0.next s1.next s2.next s3.next s4.next s5.next s6.next) :trans true))
(define-fun O () Bool (! (not (d97 s0 s1 s6)) :invar-property 0))
