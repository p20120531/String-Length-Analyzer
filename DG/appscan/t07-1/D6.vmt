(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0.next Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) x4 (not x5) (not x6) x7 s0.next))
(define-fun d2 ((x0 Bool) (x7 Bool) (s0.next Bool)) Bool (and (not x0) (not x7) (not s0.next)))
(define-fun d3 ((x0 Bool) (x5 Bool) (s0.next Bool)) Bool (and (not x0) x5 (not s0.next)))
(define-fun d4 ((x0 Bool) (x6 Bool) (s0.next Bool)) Bool (and (not x0) x6 (not s0.next)))
(define-fun d5 ((x0 Bool) (x4 Bool) (s0.next Bool)) Bool (and (not x0) (not x4) (not s0.next)))
(define-fun d6 ((x0 Bool) (x3 Bool) (s0.next Bool)) Bool (and (not x0) x3 (not s0.next)))
(define-fun d7 ((x0 Bool) (x2 Bool) (s0.next Bool)) Bool (and (not x0) x2 (not s0.next)))
(define-fun d8 ((x0 Bool) (x1 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not s0.next)))
(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0.next) (d2 x0 x7 s0.next) (d3 x0 x5 s0.next) (d4 x0 x6 s0.next) (d5 x0 x4 s0.next) (d6 x0 x3 s0.next) (d7 x0 x2 s0.next) (d8 x0 x1 s0.next)))
(define-fun d10 ((s0 Bool)) Bool (not s0))
(define-fun d11 ((s1 Bool)) Bool s1)
(define-fun d12 ((x0 Bool) (x7 Bool) (s1.next Bool)) Bool (and (not x0) (not x7) (not s1.next)))
(define-fun d13 ((x0 Bool) (x5 Bool) (s1.next Bool)) Bool (and (not x0) x5 (not s1.next)))
(define-fun d14 ((x0 Bool) (x6 Bool) (s1.next Bool)) Bool (and (not x0) x6 (not s1.next)))
(define-fun d15 ((x0 Bool) (x4 Bool) (s1.next Bool)) Bool (and (not x0) (not x4) (not s1.next)))
(define-fun d16 ((x0 Bool) (x3 Bool) (s1.next Bool)) Bool (and (not x0) x3 (not s1.next)))
(define-fun d17 ((x0 Bool) (x2 Bool) (s1.next Bool)) Bool (and (not x0) x2 (not s1.next)))
(define-fun d18 ((x0 Bool) (x1 Bool) (s1.next Bool)) Bool (and (not x0) x1 (not s1.next)))
(define-fun d19 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d12 x0 x7 s1.next) (d13 x0 x5 s1.next) (d14 x0 x6 s1.next) (d15 x0 x4 s1.next) (d16 x0 x3 s1.next) (d17 x0 x2 s1.next) (d18 x0 x1 s1.next) (d19 x0 s1 s1.next)))
(define-fun d21 ((s1 Bool)) Bool (not s1))
(define-fun d22 ((s1 Bool)) Bool s1)
(define-fun d23 ((s1 Bool)) Bool (or (d21 s1) (d22 s1)))
(define-fun d24 ((s2 Bool)) Bool (not s2))
(define-fun d25 ((x0 Bool) (x3 Bool) (s2.next Bool)) Bool (and (not x0) x3 s2.next))
(define-fun d26 ((x0 Bool) (x4 Bool) (s2.next Bool)) Bool (and (not x0) x4 s2.next))
(define-fun d27 ((x0 Bool) (x5 Bool) (s2.next Bool)) Bool (and (not x0) x5 s2.next))
(define-fun d28 ((x0 Bool) (x6 Bool) (s2.next Bool)) Bool (and (not x0) x6 s2.next))
(define-fun d29 ((x0 Bool) (x7 Bool) (s2.next Bool)) Bool (and (not x0) x7 s2.next))
(define-fun d30 ((x0 Bool) (x2 Bool) (s2.next Bool)) Bool (and (not x0) (not x2) s2.next))
(define-fun d31 ((x0 Bool) (x1 Bool) (s2.next Bool)) Bool (and (not x0) x1 s2.next))
(define-fun d32 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) s2 s2.next))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d25 x0 x3 s2.next) (d26 x0 x4 s2.next) (d27 x0 x5 s2.next) (d28 x0 x6 s2.next) (d29 x0 x7 s2.next) (d30 x0 x2 s2.next) (d31 x0 x1 s2.next) (d32 x0 s2 s2.next)))
(define-fun d34 ((s2 Bool)) Bool (not s2))
(define-fun d35 ((s2 Bool)) Bool s2)
(define-fun d36 ((s2 Bool)) Bool (or (d34 s2) (d35 s2)))
(define-fun d37 ((s3 Bool)) Bool (not s3))
(define-fun d38 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d39 ((s3 Bool)) Bool (not s3))
(define-fun d40 ((s2 Bool) (s3 Bool)) Bool (and (d24 s2) (d37 s3)))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d33 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d42 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d38 x0 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d41 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (d42 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d44 ((s2 Bool) (s3 Bool)) Bool (and (d36 s2) (d39 s3)))
(define-fun d45 ((s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d11 s1) (d40 s2 s3)))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d20 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d43 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next))))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d46 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next)))
(define-fun d49 ((s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d23 s1) (d44 s2 s3)))
(define-fun d50 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d0 s0) (d45 s1 s2 s3)))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d51 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next)))
(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d10 s0) (d49 s1 s2 s3)))
;
;
(define-fun I () Bool (! (d50 s0 s1 s2 s3) :init true))
(define-fun T () Bool (! (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) :trans true))
(define-fun O () Bool (! (not (d54 s0 s1 s2 s3)) :invar-property 0))
