(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
(declare-fun s8 () Bool)
(declare-fun s8.next () Bool)
(declare-fun s9 () Bool)
(declare-fun s9.next () Bool)
(declare-fun s10 () Bool)
(declare-fun s10.next () Bool)
(declare-fun s11 () Bool)
(declare-fun s11.next () Bool)
(declare-fun s12 () Bool)
(declare-fun s12.next () Bool)
(declare-fun s13 () Bool)
(declare-fun s13.next () Bool)
(declare-fun s14 () Bool)
(declare-fun s14.next () Bool)
(declare-fun s15 () Bool)
(declare-fun s15.next () Bool)
(declare-fun n0 () Int)
(declare-fun n0.next () Int)
(declare-fun n1 () Int)
(declare-fun n1.next () Int)
(declare-fun K0 () Int)
(declare-fun K0.next () Int)
(declare-fun K1 () Int)
(declare-fun K1.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
(define-fun nxt15 () Bool (! s7 :next s7.next))
(define-fun nxt16 () Bool (! s8 :next s8.next))
(define-fun nxt17 () Bool (! s9 :next s9.next))
(define-fun nxt18 () Bool (! s10 :next s10.next))
(define-fun nxt19 () Bool (! s11 :next s11.next))
(define-fun nxt20 () Bool (! s12 :next s12.next))
(define-fun nxt21 () Bool (! s13 :next s13.next))
(define-fun nxt22 () Bool (! s14 :next s14.next))
(define-fun nxt23 () Bool (! s15 :next s15.next))
(define-fun nxt24 () Bool (! n0 :next n0.next))
(define-fun nxt25 () Bool (! n1 :next n1.next))
(define-fun nxt26 () Bool (! K0 :next K0.next))
(define-fun nxt27 () Bool (! K1 :next K1.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d5 ((s1 Bool)) Bool (not s1))
(define-fun d6 ((s1 Bool)) Bool (not s1))
(define-fun d7 ((x0 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x7) (not s1) (not s1.next)))
(define-fun d8 ((x0 Bool) (x6 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x6) (not s1) (not s1.next)))
(define-fun d9 ((x0 Bool) (x5 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x5) (not s1) (not s1.next)))
(define-fun d10 ((x0 Bool) (x4 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x4) (not s1) (not s1.next)))
(define-fun d11 ((x0 Bool) (x3 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) x3 (not s1) (not s1.next)))
(define-fun d12 ((x0 Bool) (x2 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x2) (not s1) (not s1.next)))
(define-fun d13 ((x0 Bool) (x1 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) x1 (not s1) (not s1.next)))
(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d7 x0 x7 s1 s1.next) (d8 x0 x6 s1 s1.next) (d9 x0 x5 s1 s1.next) (d10 x0 x4 s1 s1.next) (d11 x0 x3 s1 s1.next) (d12 x0 x2 s1 s1.next) (d13 x0 x1 s1 s1.next)))
(define-fun d15 ((s1 Bool)) Bool (not s1))
(define-fun d16 ((s1 Bool) (s2 Bool)) Bool (and (not s2) (d3 s1)))
(define-fun d17 ((x0 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not s2) (not s2.next) (d4 x0 s1 s1.next)))
(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (and s2 s2.next (d14 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d19 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s2) s2.next (d5 s1) (d6 s1.next)))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d17 x0 s1 s2 s1.next s2.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s1.next s2.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s1.next s2.next)))
(define-fun d21 ((s1 Bool) (s2 Bool)) Bool (and s2 (d15 s1)))
(define-fun d22 ((s1 Bool)) Bool (not s1))
(define-fun d23 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d24 ((s1 Bool)) Bool (not s1))
(define-fun d25 ((s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (not s3) (d16 s1 s2)))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not s3) (not s3.next) (d20 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s1.next s2.next)))
(define-fun d27 ((x0 Bool) (s1 Bool) (s3 Bool) (s1.next Bool) (s3.next Bool)) Bool (and s3 s3.next (d23 x0 s1 s1.next)))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s3.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s3) s3.next (d21 s1 s2) (d22 s1.next)))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d26 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (d27 x0 s1 s3 s1.next s3.next) (d28 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s3.next)))
(define-fun d30 ((s1 Bool) (s3 Bool)) Bool (and s3 (d24 s1)))
(define-fun d31 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d0 s0) (d25 s1 s2 s3)))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d34 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d33 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next)))
(define-fun d35 ((s0 Bool) (s1 Bool) (s3 Bool)) Bool (and (d2 s0) (d30 s1 s3)))
(define-fun d36 ((s4 Bool)) Bool (not s4))
(define-fun d37 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d38 ((s4 Bool)) Bool (not s4))
(define-fun d39 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d31 s0 s1 s2 s3) (d36 s4)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d34 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (or (d37 x0 s4 s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next))))
(define-fun d42 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (d40 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d41 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next)))
(define-fun d43 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool)) Bool (and (d35 s0 s1 s3) (d38 s4)))
(define-fun d44 ((s5 Bool)) Bool (not s5))
(define-fun d45 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d46 ((s5 Bool)) Bool (not s5))
(define-fun d47 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d39 s0 s1 s2 s3 s4) (d44 s5)))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next))))
(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s5.next Bool)) Bool (or (d45 x0 s5 s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next))))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (and (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s5 s5.next)))
(define-fun d51 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d43 s0 s1 s3 s4) (d46 s5)))
(define-fun d52 ((s6 Bool)) Bool (not s6))
(define-fun d53 ((x0 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not s6) (not s6.next)))
(define-fun d54 ((s6 Bool)) Bool (not s6))
(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n1.next (+ n1 1))))
(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n1.next n1)))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (n1 Int) (s6.next Bool) (n1.next Int)) Bool (and (d53 x0 s6 s6.next) (or (d55 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next))))
(define-fun d58 ((s6 Bool)) Bool (not s6))
(define-fun d59 ((x0 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not s6) (not s6.next)))
(define-fun d60 ((s6 Bool)) Bool (not s6))
(define-fun d61 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))
(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))
(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (n0 Int) (s6.next Bool) (n0.next Int)) Bool (and (d59 x0 s6 s6.next) (or (d61 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))
(define-fun d64 ((s6 Bool)) Bool (not s6))
(define-fun d65 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 (not x7) (not s6) s6.next))
(define-fun d66 ((s6 Bool)) Bool s6)
(define-fun d67 ((s6 Bool) (s7 Bool)) Bool (and (not s7) (d58 s6)))
(define-fun d68 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and (not s7) (not s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s6 n0 s6.next n0.next)))
(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and s7 s7.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s6 s6.next) (= n0 n0.next)))
(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s7) s7.next (d60 s6) (d64 s6.next) (= n0 n0.next)))
(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 n0 s6.next s7.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 n0 s6.next s7.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 n0 s6.next s7.next n0.next)))
(define-fun d72 ((s6 Bool) (s7 Bool)) Bool (and s7 (d66 s6)))
(define-fun d73 ((s8 Bool)) Bool (not s8))
(define-fun d74 ((x0 Bool) (x6 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not x6) (not s8) (not s8.next)))
(define-fun d75 ((x0 Bool) (x5 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not x5) (not s8) (not s8.next)))
(define-fun d76 ((x0 Bool) (x4 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not x4) (not s8) (not s8.next)))
(define-fun d77 ((x0 Bool) (x3 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) x3 (not s8) (not s8.next)))
(define-fun d78 ((x0 Bool) (x7 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) x7 (not s8) (not s8.next)))
(define-fun d79 ((x0 Bool) (x2 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not x2) (not s8) (not s8.next)))
(define-fun d80 ((x0 Bool) (x1 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) x1 (not s8) (not s8.next)))
(define-fun d81 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s8.next Bool)) Bool (or (d74 x0 x6 s8 s8.next) (d75 x0 x5 s8 s8.next) (d76 x0 x4 s8 s8.next) (d77 x0 x3 s8 s8.next) (d78 x0 x7 s8 s8.next) (d79 x0 x2 s8 s8.next) (d80 x0 x1 s8 s8.next)))
(define-fun d82 ((s8 Bool)) Bool (not s8))
(define-fun d83 ((s8 Bool)) Bool (not s8))
(define-fun d84 ((x0 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not s8) s8.next))
(define-fun d85 ((s8 Bool)) Bool s8)
(define-fun d86 ((s8 Bool) (s9 Bool)) Bool (and (not s9) (d73 s8)))
(define-fun d87 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s9 Bool) (s8.next Bool) (s9.next Bool)) Bool (and (not s9) (not s9.next) (d81 x0 x1 x2 x3 x4 x5 x6 x7 s8 s8.next)))
(define-fun d88 ((x0 Bool) (s8 Bool) (s9 Bool) (s8.next Bool) (s9.next Bool)) Bool (and s9 s9.next (d84 x0 s8 s8.next)))
(define-fun d89 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s9 Bool) (s8.next Bool) (s9.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d82 s8) (d83 s8.next)))
(define-fun d90 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s9 Bool) (s8.next Bool) (s9.next Bool)) Bool (or (d87 x0 x1 x2 x3 x4 x5 x6 x7 s8 s9 s8.next s9.next) (d88 x0 s8 s9 s8.next s9.next) (d89 x0 x1 x2 x3 x4 x5 x6 x7 s8 s9 s8.next s9.next)))
(define-fun d91 ((s8 Bool) (s9 Bool)) Bool (and s9 (d85 s8)))
(define-fun d92 ((s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and (d67 s6 s7) (d86 s8 s9)))
(define-fun d93 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (or (d71 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 n0 s6.next s7.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s6 s6.next) (= s7 s7.next) (= n0 n0.next))))
(define-fun d94 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s9 Bool) (s8.next Bool) (s9.next Bool)) Bool (or (d90 x0 x1 x2 x3 x4 x5 x6 x7 s8 s9 s8.next s9.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s8 s8.next) (= s9 s9.next))))
(define-fun d95 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (d93 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 n0 s6.next s7.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s8 s9 s8.next s9.next)))
(define-fun d96 ((s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and (d72 s6 s7) (d91 s8 s9)))
(define-fun d97 ((s6 Bool) (s10 Bool)) Bool (and (not s10) (d52 s6)))
(define-fun d98 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s10 Bool) (n0 Int) (n1 Int) (s6.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (and (not s10) (not s10.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s6 n1 s6.next n1.next) (= n0 n0.next)))
(define-fun d99 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (n1 Int) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (and s10 s10.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s8 s9 n0 s6.next s7.next s8.next s9.next n0.next) (= n1 n1.next)))
(define-fun d100 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s10 Bool) (n0 Int) (n1 Int) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s10) s10.next (d54 s6) (d92 s6.next s7.next s8.next s9.next) (= n0 n0.next) (= n1 n1.next)))
(define-fun d101 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (n1 Int) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s6 s10 n0 n1 s6.next s10.next n0.next n1.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s8 s9 s10 n0 n1 s6.next s7.next s8.next s9.next s10.next n0.next n1.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s6 s10 n0 n1 s6.next s7.next s8.next s9.next s10.next n0.next n1.next)))
(define-fun d102 ((s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool)) Bool (and s10 (d96 s6 s7 s8 s9)))
(define-fun d103 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s10 Bool)) Bool (and (d47 s0 s1 s2 s3 s4 s5) (d97 s6 s10)))
(define-fun d104 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool)) Bool (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s0.next s1.next s2.next s3.next s4.next s5.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next))))
(define-fun d105 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (n1 Int) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d101 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s8 s9 s10 n0 n1 s6.next s7.next s8.next s9.next s10.next n0.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= s9 s9.next) (= s10 s10.next) (= n0 n0.next) (= n1 n1.next))))
(define-fun d106 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (and (d104 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s0.next s1.next s2.next s3.next s4.next s5.next) (d105 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s8 s9 s10 n0 n1 s6.next s7.next s8.next s9.next s10.next n0.next n1.next)))
(define-fun d107 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool)) Bool (and (d51 s0 s1 s3 s4 s5) (d102 s6 s7 s8 s9 s10)))
(define-fun d108 ((s11 Bool)) Bool (not s11))
(define-fun d109 ((x0 Bool) (s11 Bool) (s11.next Bool)) Bool (and (not x0) (not s11) (not s11.next)))
(define-fun d110 ((s11 Bool)) Bool (not s11))
(define-fun d111 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s10 Bool) (s11 Bool)) Bool (and (d103 s0 s1 s2 s3 s4 s5 s6 s10) (d108 s11)))
(define-fun d112 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= s9 s9.next) (= s10 s10.next) (= n0 n0.next) (= n1 n1.next))))
(define-fun d113 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s11 Bool) (s11.next Bool)) Bool (or (d109 x0 s11 s11.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s11 s11.next))))
(define-fun d114 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (s11.next Bool) (n0.next Int) (n1.next Int)) Bool (and (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next n1.next) (d113 x0 x1 x2 x3 x4 x5 x6 x7 s11 s11.next)))
(define-fun d115 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool)) Bool (and (d107 s0 s1 s3 s4 s5 s6 s7 s8 s9 s10) (d110 s11)))
(define-fun d116 ((s12 Bool)) Bool (not s12))
(define-fun d117 ((x0 Bool) (s12 Bool) (s12.next Bool)) Bool (and (not x0) (not s12) (not s12.next)))
(define-fun d118 ((s12 Bool)) Bool (not s12))
(define-fun d119 ((s12 Bool) (s13 Bool)) Bool (and (not s12) s13))
(define-fun d120 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s12.next Bool) (s13.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 (not x7) s12 s13 (not s12.next) (not s13.next)))
(define-fun d121 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s12.next Bool) (s13.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 x7 (not s12) (not s13) s12.next (not s13.next)))
(define-fun d122 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s12.next Bool) (s13.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 (not x7) (not s12) s13 s12.next s13.next))
(define-fun d123 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s12.next Bool) (s13.next Bool)) Bool (or (d120 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s12.next s13.next) (d121 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s12.next s13.next) (d122 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s12.next s13.next)))
(define-fun d124 ((s12 Bool) (s13 Bool)) Bool (and s12 (not s13)))
(define-fun d125 ((s12 Bool) (s14 Bool)) Bool (and (not s14) (d116 s12)))
(define-fun d126 ((x0 Bool) (s12 Bool) (s14 Bool) (s12.next Bool) (s14.next Bool)) Bool (and (not s14) (not s14.next) (d117 x0 s12 s12.next)))
(define-fun d127 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool)) Bool (and s14 s14.next (d123 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s12.next s13.next)))
(define-fun d128 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s14 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s14) s14.next (d118 s12) (d119 s12.next s13.next)))
(define-fun d129 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool)) Bool (or (d126 x0 s12 s14 s12.next s14.next) (d127 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s12.next s13.next s14.next) (d128 x0 x1 x2 x3 x4 x5 x6 x7 s12 s14 s12.next s13.next s14.next)))
(define-fun d130 ((s12 Bool) (s13 Bool) (s14 Bool)) Bool (and s14 (d124 s12 s13)))
(define-fun d131 ((s12 Bool)) Bool (not s12))
(define-fun d132 ((x0 Bool) (s12 Bool) (s12.next Bool)) Bool (and (not x0) (not s12) (not s12.next)))
(define-fun d133 ((s12 Bool)) Bool (not s12))
(define-fun d134 ((s12 Bool) (s14 Bool) (s15 Bool)) Bool (and (not s15) (d125 s12 s14)))
(define-fun d135 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s15 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool) (s15.next Bool)) Bool (and (not s15) (not s15.next) (d129 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s12.next s13.next s14.next)))
(define-fun d136 ((x0 Bool) (s12 Bool) (s15 Bool) (s12.next Bool) (s15.next Bool)) Bool (and s15 s15.next (d132 x0 s12 s12.next)))
(define-fun d137 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s15 Bool) (s12.next Bool) (s15.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s15) s15.next (d130 s12 s13 s14) (d131 s12.next)))
(define-fun d138 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s15 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool) (s15.next Bool)) Bool (or (d135 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s15 s12.next s13.next s14.next s15.next) (d136 x0 s12 s15 s12.next s15.next) (d137 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s15 s12.next s15.next)))
(define-fun d139 ((s12 Bool) (s15 Bool)) Bool (and s15 (d133 s12)))
(define-fun d140 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s10 Bool) (s11 Bool) (s12 Bool) (s14 Bool) (s15 Bool)) Bool (and (d111 s0 s1 s2 s3 s4 s5 s6 s10 s11) (d134 s12 s14 s15)))
(define-fun d141 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (s11.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d114 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next s11.next n0.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= s9 s9.next) (= s10 s10.next) (= s11 s11.next) (= n0 n0.next) (= n1 n1.next))))
(define-fun d142 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s15 Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool) (s15.next Bool)) Bool (or (d138 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s15 s12.next s13.next s14.next s15.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s12 s12.next) (= s13 s13.next) (= s14 s14.next) (= s15 s15.next))))
(define-fun d143 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool) (s12 Bool) (s13 Bool) (s14 Bool) (s15 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (s11.next Bool) (s12.next Bool) (s13.next Bool) (s14.next Bool) (s15.next Bool) (n0.next Int) (n1.next Int)) Bool (and (d141 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next s11.next n0.next n1.next) (d142 x0 x1 x2 x3 x4 x5 x6 x7 s12 s13 s14 s15 s12.next s13.next s14.next s15.next)))
(define-fun d144 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool) (s12 Bool) (s15 Bool)) Bool (and (d115 s0 s1 s3 s4 s5 s6 s7 s8 s9 s10 s11) (d139 s12 s15)))
;
(define-fun d145 ((K0 Int)) Bool (= K0 (- 0 1)))
(define-fun d146 ((n0 Int) (n1 Int) (K0 Int)) Bool (= K1 (+ n0 n1)))
(define-fun d147 ((n1 Int)) Bool (= 0 n1))
(define-fun d148 ((K0 Int)) Bool (= K1 (- 0 1)))
(define-fun d149 ((s0 Bool) (s1 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (s11 Bool) (s12 Bool) (s15 Bool) (n0 Int) (n1 Int) (K0 Int)) Bool (and (d144 s0 s1 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s15) (d145 K0) (d146 n0 n1 K0) (d147 n1) (d148 K0)))
(define-fun d150 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s10 Bool) (s11 Bool) (s12 Bool) (s14 Bool) (s15 Bool) (n0 Int) (n1 Int)) Bool (and (d140 s0 s1 s2 s3 s4 s5 s6 s10 s11 s12 s14 s15) (= 0 n0) (= 0 n1)))
;
(define-fun I () Bool (! (d150 s0 s1 s2 s3 s4 s5 s6 s10 s11 s12 s14 s15 n0 n1) :init true))
(define-fun T () Bool (! (d143 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next s11.next s12.next s13.next s14.next s15.next n0.next n1.next) :trans true))
(define-fun O () Bool (! (not (d149 s0 s1 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s15 n0 n1 K0)) :invar-property 0))
