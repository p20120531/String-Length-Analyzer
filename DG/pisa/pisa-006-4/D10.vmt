(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
(declare-fun s8 () Bool)
(declare-fun s8.next () Bool)
(declare-fun s9 () Bool)
(declare-fun s9.next () Bool)
(declare-fun n0 () Int)
(declare-fun n0.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! s6 :next s6.next))
(define-fun nxt15 () Bool (! s7 :next s7.next))
(define-fun nxt16 () Bool (! s8 :next s8.next))
(define-fun nxt17 () Bool (! s9 :next s9.next))
(define-fun nxt18 () Bool (! n0 :next n0.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d5 ((s1 Bool)) Bool (not s1))
(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))
(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))
(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (n0 Int) (s1.next Bool) (n0.next Int)) Bool (and (d4 x0 s1 s1.next) (or (d6 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))
(define-fun d9 ((s1 Bool)) Bool (not s1))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 x7 (not s1) s1.next))
(define-fun d11 ((s1 Bool)) Bool s1)
(define-fun d12 ((s1 Bool)) Bool (not s1))
(define-fun d13 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d14 ((s1 Bool)) Bool (not s1))
(define-fun d15 ((s2 Bool)) Bool (not s2))
(define-fun d16 ((x0 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x7) (not s2) (not s2.next)))
(define-fun d17 ((x0 Bool) (x6 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x6) (not s2) (not s2.next)))
(define-fun d18 ((x0 Bool) (x5 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x5) (not s2) (not s2.next)))
(define-fun d19 ((x0 Bool) (x4 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x4) (not s2) (not s2.next)))
(define-fun d20 ((x0 Bool) (x3 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x3 (not s2) (not s2.next)))
(define-fun d21 ((x0 Bool) (x2 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x2) (not s2) (not s2.next)))
(define-fun d22 ((x0 Bool) (x1 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x1 (not s2) (not s2.next)))
(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d16 x0 x7 s2 s2.next) (d17 x0 x6 s2 s2.next) (d18 x0 x5 s2 s2.next) (d19 x0 x4 s2 s2.next) (d20 x0 x3 s2 s2.next) (d21 x0 x2 s2 s2.next) (d22 x0 x1 s2 s2.next)))
(define-fun d24 ((s2 Bool)) Bool (not s2))
(define-fun d25 ((s1 Bool) (s2 Bool)) Bool (and (d12 s1) (d15 s2)))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d13 x0 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d23 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d28 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (and (d26 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d29 ((s1 Bool) (s2 Bool)) Bool (and (d14 s1) (d24 s2)))
(define-fun d30 ((s1 Bool) (s3 Bool)) Bool (and (not s3) (d9 s1)))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s3 Bool) (s1.next Bool) (s3.next Bool)) Bool (and (not s3) (not s3.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and s3 s3.next (d28 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s1.next s2.next)))
(define-fun d33 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s3) s3.next (d11 s1) (d25 s1.next s2.next)))
(define-fun d34 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d31 x0 x1 x2 x3 x4 x5 x6 x7 s1 s3 s1.next s3.next) (d32 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (d33 x0 x1 x2 x3 x4 x5 x6 x7 s1 s3 s1.next s2.next s3.next)))
(define-fun d35 ((s1 Bool) (s2 Bool) (s3 Bool)) Bool (and s3 (d29 s1 s2)))
(define-fun d36 ((s1 Bool) (s4 Bool)) Bool (and (not s4) (d3 s1)))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s4 Bool) (n0 Int) (s1.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (not s4) (not s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s1 n0 s1.next n0.next)))
(define-fun d38 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and s4 s4.next (d34 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (= n0 n0.next)))
(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s4 Bool) (n0 Int) (s1.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s4) s4.next (d5 s1) (d30 s1.next s3.next) (= n0 n0.next)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (or (d37 x0 x1 x2 x3 x4 x5 x6 x7 s1 s4 n0 s1.next s4.next n0.next) (d38 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n0 s1.next s2.next s3.next s4.next n0.next) (d39 x0 x1 x2 x3 x4 x5 x6 x7 s1 s4 n0 s1.next s3.next s4.next n0.next)))
(define-fun d41 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and s4 (d35 s1 s2 s3)))
(define-fun d42 ((s0 Bool) (s1 Bool) (s4 Bool)) Bool (and (d0 s0) (d36 s1 s4)))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (or (d40 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n0 s1.next s2.next s3.next s4.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= n0 n0.next))))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d44 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n0 s1.next s2.next s3.next s4.next n0.next)))
(define-fun d46 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d2 s0) (d41 s1 s2 s3 s4)))
(define-fun d47 ((s5 Bool)) Bool (not s5))
(define-fun d48 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d49 ((s5 Bool)) Bool (not s5))
(define-fun d50 ((s5 Bool)) Bool (not s5))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 x7 (not s5) s5.next))
(define-fun d52 ((s5 Bool)) Bool s5)
(define-fun d53 ((s5 Bool) (s6 Bool)) Bool (and (not s6) (d47 s5)))
(define-fun d54 ((x0 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not s6) (not s6.next) (d48 x0 s5 s5.next)))
(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and s6 s6.next (d51 x0 x1 x2 x3 x4 x5 x6 x7 s5 s5.next)))
(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s6) s6.next (d49 s5) (d50 s5.next)))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s5.next Bool) (s6.next Bool)) Bool (or (d54 x0 s5 s6 s5.next s6.next) (d55 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next)))
(define-fun d58 ((s5 Bool) (s6 Bool)) Bool (and s6 (d52 s5)))
(define-fun d59 ((s5 Bool)) Bool (not s5))
(define-fun d60 ((x0 Bool) (s5 Bool) (s5.next Bool)) Bool (and (not x0) (not s5) (not s5.next)))
(define-fun d61 ((s5 Bool)) Bool (not s5))
(define-fun d62 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s7) (d53 s5 s6)))
(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s7) (not s7.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s5.next s6.next)))
(define-fun d64 ((x0 Bool) (s5 Bool) (s7 Bool) (s5.next Bool) (s7.next Bool)) Bool (and s7 s7.next (d60 x0 s5 s5.next)))
(define-fun d65 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s7.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s7) s7.next (d58 s5 s6) (d59 s5.next)))
(define-fun d66 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 s5 s7 s5.next s7.next) (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s7.next)))
(define-fun d67 ((s5 Bool) (s7 Bool)) Bool (and s7 (d61 s5)))
(define-fun d68 ((s0 Bool) (s1 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (d42 s0 s1 s4) (d62 s5 s6 s7)))
(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (or (d45 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= n0 n0.next))))
(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d66 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next))))
(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))
(define-fun d72 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s7 Bool)) Bool (and (d46 s0 s1 s2 s3 s4) (d67 s5 s7)))
(define-fun d73 ((s8 Bool)) Bool (not s8))
(define-fun d74 ((x0 Bool) (s8 Bool) (s8.next Bool)) Bool (and (not x0) (not s8) (not s8.next)))
(define-fun d75 ((s8 Bool)) Bool (not s8))
(define-fun d76 ((s0 Bool) (s1 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (d68 s0 s1 s4 s5 s6 s7) (d73 s8)))
(define-fun d77 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (or (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= n0 n0.next))))
(define-fun d78 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s8 Bool) (s8.next Bool)) Bool (or (d74 x0 s8 s8.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s8 s8.next))))
(define-fun d79 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (d77 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next n0.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s8 s8.next)))
(define-fun d80 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s7 Bool) (s8 Bool)) Bool (and (d72 s0 s1 s2 s3 s4 s5 s7) (d75 s8)))
(define-fun d81 ((s9 Bool)) Bool (not s9))
(define-fun d82 ((x0 Bool) (s9 Bool) (s9.next Bool)) Bool (and (not x0) (not s9) (not s9.next)))
(define-fun d83 ((s9 Bool)) Bool (not s9))
(define-fun d84 ((s0 Bool) (s1 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and (d76 s0 s1 s4 s5 s6 s7 s8) (d81 s9)))
(define-fun d85 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (or (d79 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= n0 n0.next))))
(define-fun d86 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s9 Bool) (s9.next Bool)) Bool (or (d82 x0 s9 s9.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s9 s9.next))))
(define-fun d87 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (d85 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d86 x0 x1 x2 x3 x4 x5 x6 x7 s9 s9.next)))
(define-fun d88 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and (d80 s0 s1 s2 s3 s4 s5 s7 s8) (d83 s9)))
;
;
(define-fun I () Bool (! (d84 s0 s1 s4 s5 s6 s7 s8 s9) :init true))
(define-fun T () Bool (! (d87 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) :trans true))
(define-fun O () Bool (! (not (d88 s0 s1 s2 s3 s4 s5 s7 s8 s9)) :invar-property 0))
