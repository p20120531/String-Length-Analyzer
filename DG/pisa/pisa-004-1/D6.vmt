(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun n0 () Int)
(declare-fun n0.next () Int)
(declare-fun n1 () Int)
(declare-fun n1.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! n0 :next n0.next))
(define-fun nxt14 () Bool (! n1 :next n1.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))
(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (n0 Int) (s0.next Bool) (n0.next Int)) Bool (and (d1 x0 s0 s0.next) (or (d3 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))
(define-fun d6 ((s1 Bool)) Bool (not s1))
(define-fun d7 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d8 ((s1 Bool)) Bool (not s1))
(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n1.next (+ n1 1))))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n1.next n1)))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (n1 Int) (s1.next Bool) (n1.next Int)) Bool (and (d7 x0 s1 s1.next) (or (d9 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next))))
(define-fun d12 ((s1 Bool)) Bool (not s1))
(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 x7 (not s1) s1.next))
(define-fun d14 ((s1 Bool)) Bool s1)
(define-fun d15 ((s1 Bool)) Bool (not s1))
(define-fun d16 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d17 ((s1 Bool)) Bool (not s1))
(define-fun d18 ((s2 Bool)) Bool (not s2))
(define-fun d19 ((x0 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x7) (not s2) (not s2.next)))
(define-fun d20 ((x0 Bool) (x6 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x6) (not s2) (not s2.next)))
(define-fun d21 ((x0 Bool) (x5 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x5) (not s2) (not s2.next)))
(define-fun d22 ((x0 Bool) (x4 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x4) (not s2) (not s2.next)))
(define-fun d23 ((x0 Bool) (x3 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x3 (not s2) (not s2.next)))
(define-fun d24 ((x0 Bool) (x2 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x2) (not s2) (not s2.next)))
(define-fun d25 ((x0 Bool) (x1 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x1 (not s2) (not s2.next)))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d19 x0 x7 s2 s2.next) (d20 x0 x6 s2 s2.next) (d21 x0 x5 s2 s2.next) (d22 x0 x4 s2 s2.next) (d23 x0 x3 s2 s2.next) (d24 x0 x2 s2 s2.next) (d25 x0 x1 s2 s2.next)))
(define-fun d27 ((s2 Bool)) Bool (not s2))
(define-fun d28 ((s1 Bool) (s2 Bool)) Bool (and (d15 s1) (d18 s2)))
(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d16 x0 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d26 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s1.next Bool) (s2.next Bool)) Bool (and (d29 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d32 ((s1 Bool) (s2 Bool)) Bool (and (d17 s1) (d27 s2)))
(define-fun d33 ((s1 Bool) (s3 Bool)) Bool (and (not s3) (d12 s1)))
(define-fun d34 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s3 Bool) (s1.next Bool) (s3.next Bool)) Bool (and (not s3) (not s3.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and s3 s3.next (d31 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s1.next s2.next)))
(define-fun d36 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s3) s3.next (d14 s1) (d28 s1.next s2.next)))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d34 x0 x1 x2 x3 x4 x5 x6 x7 s1 s3 s1.next s3.next) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (d36 x0 x1 x2 x3 x4 x5 x6 x7 s1 s3 s1.next s2.next s3.next)))
(define-fun d38 ((s1 Bool) (s2 Bool) (s3 Bool)) Bool (and s3 (d32 s1 s2)))
(define-fun d39 ((s1 Bool) (s4 Bool)) Bool (and (not s4) (d6 s1)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s4 Bool) (n1 Int) (s1.next Bool) (s4.next Bool) (n1.next Int)) Bool (and (not s4) (not s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s1 n1 s1.next n1.next)))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n1 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n1.next Int)) Bool (and s4 s4.next (d37 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s1.next s2.next s3.next) (= n1 n1.next)))
(define-fun d42 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s4 Bool) (n1 Int) (s1.next Bool) (s3.next Bool) (s4.next Bool) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s4) s4.next (d8 s1) (d33 s1.next s3.next) (= n1 n1.next)))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n1 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n1.next Int)) Bool (or (d40 x0 x1 x2 x3 x4 x5 x6 x7 s1 s4 n1 s1.next s4.next n1.next) (d41 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n1 s1.next s2.next s3.next s4.next n1.next) (d42 x0 x1 x2 x3 x4 x5 x6 x7 s1 s4 n1 s1.next s3.next s4.next n1.next)))
(define-fun d44 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and s4 (d38 s1 s2 s3)))
(define-fun d45 ((s0 Bool) (s1 Bool) (s4 Bool)) Bool (and (d0 s0) (d39 s1 s4)))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (n0 Int) (s0.next Bool) (n0.next Int)) Bool (or (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 n0 s0.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= n0 n0.next))))
(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n1 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n1.next Int)) Bool (or (d43 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n1 s1.next s2.next s3.next s4.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= n1 n1.next))))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int) (n1.next Int)) Bool (and (d46 x0 x1 x2 x3 x4 x5 x6 x7 s0 n0 s0.next n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n1 s1.next s2.next s3.next s4.next n1.next)))
(define-fun d49 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d2 s0) (d44 s1 s2 s3 s4)))
;
;
(define-fun I () Bool (! (d45 s0 s1 s4) :init true))
(define-fun T () Bool (! (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 n1 s0.next s1.next s2.next s3.next s4.next n0.next n1.next) :trans true))
(define-fun O () Bool (! (not (d49 s0 s1 s2 s3 s4)) :invar-property 0))
