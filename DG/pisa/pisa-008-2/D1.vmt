(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun y0 () Bool)
(declare-fun y0.next () Bool)
(declare-fun y1 () Bool)
(declare-fun y1.next () Bool)
(declare-fun y2 () Bool)
(declare-fun y2.next () Bool)
(declare-fun y3 () Bool)
(declare-fun y3.next () Bool)
(declare-fun y4 () Bool)
(declare-fun y4.next () Bool)
(declare-fun y5 () Bool)
(declare-fun y5.next () Bool)
(declare-fun y6 () Bool)
(declare-fun y6.next () Bool)
(declare-fun y7 () Bool)
(declare-fun y7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! y0 :next y0.next))
(define-fun nxt9 () Bool (! y1 :next y1.next))
(define-fun nxt10 () Bool (! y2 :next y2.next))
(define-fun nxt11 () Bool (! y3 :next y3.next))
(define-fun nxt12 () Bool (! y4 :next y4.next))
(define-fun nxt13 () Bool (! y5 :next y5.next))
(define-fun nxt14 () Bool (! y6 :next y6.next))
(define-fun nxt15 () Bool (! y7 :next y7.next))
(define-fun nxt16 () Bool (! s0 :next s0.next))
(define-fun nxt17 () Bool (! s1 :next s1.next))
(define-fun nxt18 () Bool (! s2 :next s2.next))
(define-fun nxt19 () Bool (! s3 :next s3.next))
(define-fun nxt20 () Bool (! s4 :next s4.next))
(define-fun nxt21 () Bool (! s5 :next s5.next))
(define-fun nxt22 () Bool (! s6 :next s6.next))
(define-fun nxt23 () Bool (! s7 :next s7.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun leftAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7))
(define-fun rightAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s0 Bool) (s1 Bool)) Bool (and (not s1) (d0 s0)))
(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (= s1 s1.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d1 x0 s0 s0.next)))
(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (and (not s1) s1.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s1 (not s1.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))))
(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (= s0 s0.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))
(define-fun d8 ((s0 Bool) (s1 Bool)) Bool (and (not s1) (d2 s0)))
(define-fun d9 ((s2 Bool)) Bool (not s2))
(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s2) s2.next))
(define-fun d11 ((s2 Bool)) Bool s2)
(define-fun d12 ((s2 Bool)) Bool (not s2))
(define-fun d13 ((x0 Bool) (x6 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x6) (not s2) (not s2.next)))
(define-fun d14 ((x0 Bool) (x5 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x5) (not s2) (not s2.next)))
(define-fun d15 ((x0 Bool) (x3 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x3 (not s2) (not s2.next)))
(define-fun d16 ((x0 Bool) (x4 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x4 (not s2) (not s2.next)))
(define-fun d17 ((x0 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x7 (not s2) (not s2.next)))
(define-fun d18 ((x0 Bool) (x2 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not x2) (not s2) (not s2.next)))
(define-fun d19 ((x0 Bool) (x1 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) x1 (not s2) (not s2.next)))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d13 x0 x6 s2 s2.next) (d14 x0 x5 s2 s2.next) (d15 x0 x3 s2 s2.next) (d16 x0 x4 s2 s2.next) (d17 x0 x7 s2 s2.next) (d18 x0 x2 s2 s2.next) (d19 x0 x1 s2 s2.next)))
(define-fun d21 ((s2 Bool)) Bool (not s2))
(define-fun d22 ((s2 Bool) (s3 Bool)) Bool (and (not s3) (d12 s2)))
(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not s3) (not s3.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d20 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d24 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and s3 s3.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not s3) s3.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d21 s2) (d9 s2.next)))
(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (and s3 (not s3.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d11 s2) (d12 s2.next)))
(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d23 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d24 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d25 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next)))
(define-fun d28 ((s2 Bool) (s3 Bool)) Bool (and (not s3) (or (d21 s2) (d12 s2))))
(define-fun d29 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d3 s0 s1) (d22 s2 s3)))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s3 Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d27 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next) (= s3 s3.next))))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d30 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s2 s3 s2.next s3.next)))
(define-fun d33 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d8 s0 s1) (d28 s2 s3)))
(define-fun d34 ((s4 Bool) (s5 Bool) (s6 Bool)) Bool (and (not s4) s5 (not s6)))
(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s4) s5 s6 (not s4.next) (not s5.next) s6.next))
(define-fun d36 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s4) s5 (not s6) s4.next (not s5.next) s6.next))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) (not x6) (not x7) s4 (not s5) (not s6) (not s4.next) s5.next s6.next))
(define-fun d38 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s4) (not s5) (not s6) s4.next (not s5.next) (not s6.next)))
(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 s4 (not s5) s6 (not s4.next) (not s5.next) (not s6.next)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool)) Bool (or (d35 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next) (d36 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next) (d37 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next) (d38 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next) (d39 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next)))
(define-fun d41 ((s4 Bool) (s5 Bool) (s6 Bool)) Bool (and (not s4) (not s5) s6))
(define-fun d42 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s7) (d29 s0 s1 s2 s3) (d34 s4 s5 s6)))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s1) (not s1.next) (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (not s7) (not s7.next) (d34 s4 s5 s6) (d34 s4.next s5.next s6.next)))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s1) (not s1.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (not s7) s7.next (d34 s4 s5 s6) (d34 s4.next s5.next s6.next)))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s1) (not s1.next) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) s7 s7.next (d40 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s4.next s5.next s6.next)))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s1) s1.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d32 true false false false false false false true s0 s1 s2 s3 s0.next s1.next s2.next s3.next) s7 (not s7.next) (d34 s4.next s5.next s6.next) (d41 s4 s5 s6)))
(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and s1 s1.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d32 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (not s7) (not s7.next) (d34 s4 s5 s6) (d34 s4.next s5.next s6.next)))
(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and s1 (not s1.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d32 true false false false false false true false s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (not s7) (not s7.next) (d34 s4 s5 s6) (d34 s4.next s5.next s6.next)))
(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d46 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next)))
(define-fun d50 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s7) (d33 s0 s1 s2 s3) (d34 s4 s5 s6)))
;
;
(define-fun I () Bool (! (d42 s0 s1 s2 s3 s4 s5 s6 s7) :init true))
(define-fun T () Bool (! (d49 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next) :trans true))
(define-fun O () Bool (! (not (d50 s0 s1 s2 s3 s4 s5 s6 s7)) :invar-property 0))
