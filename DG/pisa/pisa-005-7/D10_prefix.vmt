(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun y0 () Bool)
(declare-fun y0.next () Bool)
(declare-fun y1 () Bool)
(declare-fun y1.next () Bool)
(declare-fun y2 () Bool)
(declare-fun y2.next () Bool)
(declare-fun y3 () Bool)
(declare-fun y3.next () Bool)
(declare-fun y4 () Bool)
(declare-fun y4.next () Bool)
(declare-fun y5 () Bool)
(declare-fun y5.next () Bool)
(declare-fun y6 () Bool)
(declare-fun y6.next () Bool)
(declare-fun y7 () Bool)
(declare-fun y7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun s6 () Bool)
(declare-fun s6.next () Bool)
(declare-fun s7 () Bool)
(declare-fun s7.next () Bool)
(declare-fun s8 () Bool)
(declare-fun s8.next () Bool)
(declare-fun s9 () Bool)
(declare-fun s9.next () Bool)
(declare-fun n0 () Int)
(declare-fun n0.next () Int)
(declare-fun n1 () Int)
(declare-fun n1.next () Int)
(declare-fun n3 () Int)
(declare-fun n3.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! y0 :next y0.next))
(define-fun nxt9 () Bool (! y1 :next y1.next))
(define-fun nxt10 () Bool (! y2 :next y2.next))
(define-fun nxt11 () Bool (! y3 :next y3.next))
(define-fun nxt12 () Bool (! y4 :next y4.next))
(define-fun nxt13 () Bool (! y5 :next y5.next))
(define-fun nxt14 () Bool (! y6 :next y6.next))
(define-fun nxt15 () Bool (! y7 :next y7.next))
(define-fun nxt16 () Bool (! s0 :next s0.next))
(define-fun nxt17 () Bool (! s1 :next s1.next))
(define-fun nxt18 () Bool (! s2 :next s2.next))
(define-fun nxt19 () Bool (! s3 :next s3.next))
(define-fun nxt20 () Bool (! s4 :next s4.next))
(define-fun nxt21 () Bool (! s5 :next s5.next))
(define-fun nxt22 () Bool (! s6 :next s6.next))
(define-fun nxt23 () Bool (! s7 :next s7.next))
(define-fun nxt24 () Bool (! s8 :next s8.next))
(define-fun nxt25 () Bool (! s9 :next s9.next))
(define-fun nxt26 () Bool (! n0 :next n0.next))
(define-fun nxt27 () Bool (! n1 :next n1.next))
(define-fun nxt28 () Bool (! n3 :next n3.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x7) (not s1) (not s1.next)))
(define-fun d5 ((x0 Bool) (x6 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x6) (not s1) (not s1.next)))
(define-fun d6 ((x0 Bool) (x5 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x5) (not s1) (not s1.next)))
(define-fun d7 ((x0 Bool) (x4 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x4) (not s1) (not s1.next)))
(define-fun d8 ((x0 Bool) (x3 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) x3 (not s1) (not s1.next)))
(define-fun d9 ((x0 Bool) (x2 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x2) (not s1) (not s1.next)))
(define-fun d10 ((x0 Bool) (x1 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) x1 (not s1) (not s1.next)))
(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d4 x0 x7 s1 s1.next) (d5 x0 x6 s1 s1.next) (d6 x0 x5 s1 s1.next) (d7 x0 x4 s1 s1.next) (d8 x0 x3 s1 s1.next) (d9 x0 x2 s1 s1.next) (d10 x0 x1 s1 s1.next)))
(define-fun d12 ((s1 Bool)) Bool (not s1))
(define-fun d13 ((s0 Bool) (s1 Bool)) Bool (and (d0 s0) (d3 s1)))
(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (or (d11 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next))))
(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next)))
(define-fun d17 ((s0 Bool) (s1 Bool)) Bool (and (d2 s0) (d12 s1)))
(define-fun d18 ((s2 Bool)) Bool (not s2))
(define-fun d19 ((x0 Bool) (s2 Bool) (s2.next Bool)) Bool (and (not x0) (not s2) (not s2.next)))
(define-fun d20 ((s2 Bool)) Bool (not s2))
(define-fun d21 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d13 s0 s1) (d18 s2)))
(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next))))
(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (d19 x0 s2 s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s2 s2.next))))
(define-fun d24 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d23 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))
(define-fun d25 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (d17 s0 s1) (d20 s2)))
(define-fun d26 ((s3 Bool)) Bool (not s3))
(define-fun d27 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) (not s3.next)))
(define-fun d28 ((s3 Bool)) Bool (not s3))
(define-fun d29 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d21 s0 s1 s2) (d26 s3)))
(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d24 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next))))
(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d27 x0 s3 s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next))))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (d30 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d33 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (d25 s0 s1 s2) (d28 s3)))
(define-fun d34 ((s4 Bool)) Bool (not s4))
(define-fun d35 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d36 ((s4 Bool)) Bool (not s4))
(define-fun d37 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n1.next (+ n1 1))))
(define-fun d38 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n1 Int) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n1.next n1)))
(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (n1 Int) (s4.next Bool) (n1.next Int)) Bool (and (d35 x0 s4 s4.next) (or (d37 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next) (d38 x0 x1 x2 x3 x4 x5 x6 x7 n1 n1.next))))
(define-fun d40 ((s4 Bool)) Bool (not s4))
(define-fun d41 ((x0 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not s4) (not s4.next)))
(define-fun d42 ((s4 Bool)) Bool (not s4))
(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (n0 Int) (s4.next Bool) (n0.next Int)) Bool (and (d41 x0 s4 s4.next) (or (d43 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d44 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))
(define-fun d46 ((s4 Bool)) Bool (not s4))
(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 (not x7) (not s4) s4.next))
(define-fun d48 ((s4 Bool)) Bool s4)
(define-fun d49 ((s4 Bool) (s5 Bool)) Bool (and (not s5) (d40 s4)))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (and (not s5) (not s5.next) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s4 n0 s4.next n0.next)))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (and s5 s5.next (d47 x0 x1 x2 x3 x4 x5 x6 x7 s4 s4.next) (= n0 n0.next)))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s5) s5.next (d42 s4) (d46 s4.next) (= n0 n0.next)))
(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 n0 s4.next s5.next n0.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 n0 s4.next s5.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 n0 s4.next s5.next n0.next)))
(define-fun d54 ((s4 Bool) (s5 Bool)) Bool (and s5 (d48 s4)))
(define-fun d55 ((s6 Bool)) Bool (not s6))
(define-fun d56 ((x0 Bool) (x6 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not x6) (not s6) (not s6.next)))
(define-fun d57 ((x0 Bool) (x5 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not x5) (not s6) (not s6.next)))
(define-fun d58 ((x0 Bool) (x4 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not x4) (not s6) (not s6.next)))
(define-fun d59 ((x0 Bool) (x3 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) x3 (not s6) (not s6.next)))
(define-fun d60 ((x0 Bool) (x7 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) x7 (not s6) (not s6.next)))
(define-fun d61 ((x0 Bool) (x2 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not x2) (not s6) (not s6.next)))
(define-fun d62 ((x0 Bool) (x1 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) x1 (not s6) (not s6.next)))
(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s6.next Bool)) Bool (or (d56 x0 x6 s6 s6.next) (d57 x0 x5 s6 s6.next) (d58 x0 x4 s6 s6.next) (d59 x0 x3 s6 s6.next) (d60 x0 x7 s6 s6.next) (d61 x0 x2 s6 s6.next) (d62 x0 x1 s6 s6.next)))
(define-fun d64 ((s6 Bool)) Bool (not s6))
(define-fun d65 ((s6 Bool)) Bool (not s6))
(define-fun d66 ((x0 Bool) (s6 Bool) (s6.next Bool)) Bool (and (not x0) (not s6) s6.next))
(define-fun d67 ((s6 Bool)) Bool s6)
(define-fun d68 ((s6 Bool) (s7 Bool)) Bool (and (not s7) (d55 s6)))
(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not s7) (not s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s6 s6.next)))
(define-fun d70 ((x0 Bool) (s6 Bool) (s7 Bool) (s6.next Bool) (s7.next Bool)) Bool (and s7 s7.next (d66 x0 s6 s6.next)))
(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s6.next Bool) (s7.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s7) s7.next (d64 s6) (d65 s6.next)))
(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s6.next s7.next) (d70 x0 s6 s7 s6.next s7.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s6.next s7.next)))
(define-fun d73 ((s6 Bool) (s7 Bool)) Bool (and s7 (d67 s6)))
(define-fun d74 ((s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (d49 s4 s5) (d68 s6 s7)))
(define-fun d75 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (n0.next Int)) Bool (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 n0 s4.next s5.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next) (= s5 s5.next) (= n0 n0.next))))
(define-fun d76 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s6 Bool) (s7 Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d72 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s6.next s7.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s6 s6.next) (= s7 s7.next))))
(define-fun d77 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (n0 Int) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (n0.next Int)) Bool (and (d75 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 n0 s4.next s5.next n0.next) (d76 x0 x1 x2 x3 x4 x5 x6 x7 s6 s7 s6.next s7.next)))
(define-fun d78 ((s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (d54 s4 s5) (d73 s6 s7)))
(define-fun d79 ((s4 Bool) (s8 Bool)) Bool (and (not s8) (d34 s4)))
(define-fun d80 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s8 Bool) (n0 Int) (n1 Int) (s4.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (and (not s8) (not s8.next) (d39 x0 x1 x2 x3 x4 x5 x6 x7 s4 n1 s4.next n1.next) (= n0 n0.next)))
(define-fun d81 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (n1 Int) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (and s8 s8.next (d77 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s7 n0 s4.next s5.next s6.next s7.next n0.next) (= n1 n1.next)))
(define-fun d82 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s8 Bool) (n0 Int) (n1 Int) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s8) s8.next (d36 s4) (d74 s4.next s5.next s6.next s7.next) (= n0 n0.next) (= n1 n1.next)))
(define-fun d83 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (n1 Int) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d80 x0 x1 x2 x3 x4 x5 x6 x7 s4 s8 n0 n1 s4.next s8.next n0.next n1.next) (d81 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s7 s8 n0 n1 s4.next s5.next s6.next s7.next s8.next n0.next n1.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s4 s8 n0 n1 s4.next s5.next s6.next s7.next s8.next n0.next n1.next)))
(define-fun d84 ((s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and s8 (d78 s4 s5 s6 s7)))
(define-fun d85 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s8 Bool)) Bool (and (d29 s0 s1 s2 s3) (d79 s4 s8)))
(define-fun d86 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next))))
(define-fun d87 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (n1 Int) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d83 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s7 s8 n0 n1 s4.next s5.next s6.next s7.next s8.next n0.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= n0 n0.next) (= n1 n1.next))))
(define-fun d88 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (and (d86 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d87 x0 x1 x2 x3 x4 x5 x6 x7 s4 s5 s6 s7 s8 n0 n1 s4.next s5.next s6.next s7.next s8.next n0.next n1.next)))
(define-fun d89 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (d33 s0 s1 s2 s3) (d84 s4 s5 s6 s7 s8)))
(define-fun d90 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s8 Bool) (s9 Bool)) Bool (and (not s9) (d85 s0 s1 s2 s3 s4 s8)))
(define-fun d91 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (n1 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int) (n1.next Int)) Bool (or (d88 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next n1.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= n0 n0.next) (= n1 n1.next))))
(define-fun d92 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n3 Int) (n3.next Int)) Bool (or (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n3.next (+ n3 1))) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n3.next n3))))
(define-fun d93 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (n1 Int) (n3 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int) (n1.next Int) (n3.next Int)) Bool (and (not s9) (not s9.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next n1.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 n3 n3.next)))
(define-fun d94 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (n1 Int) (n3 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int) (n1.next Int) (n3.next Int)) Bool (and (not s9) s9.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= s6 s6.next) (= s7 s7.next) (= s8 s8.next) (= n0 n0.next) (= n1 n1.next) (= n3.next n3)))
(define-fun d95 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (n1 Int) (n3 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int) (n1.next Int) (n3.next Int)) Bool (and s9 s9.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d88 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 n1 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next n1.next) (= n3.next n3)))
(define-fun d96 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (n1 Int) (n3 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int) (n1.next Int) (n3.next Int)) Bool (or (d93 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 n1 n3 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next n1.next n3.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 n1 n3 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next n1.next n3.next) (d95 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 n1 n3 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next n1.next n3.next)))
(define-fun d97 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and s9 (d89 s0 s1 s2 s3 s4 s5 s6 s7 s8)))
;
;
(define-fun I () Bool (! (d90 s0 s1 s2 s3 s4 s8 s9) :init true))
(define-fun T () Bool (! (d96 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 n1 n3 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next n1.next n3.next) :trans true))
(define-fun O () Bool (! (not (d97 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)) :invar-property 0))
