(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
(declare-fun s1 () Bool)
(declare-fun s1.next () Bool)
(declare-fun s2 () Bool)
(declare-fun s2.next () Bool)
(declare-fun s3 () Bool)
(declare-fun s3.next () Bool)
(declare-fun s4 () Bool)
(declare-fun s4.next () Bool)
(declare-fun s5 () Bool)
(declare-fun s5.next () Bool)
(declare-fun n8 () Int)
(declare-fun n8.next () Int)
(declare-fun n9 () Int)
(declare-fun n9.next () Int)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! s0 :next s0.next))
(define-fun nxt9 () Bool (! s1 :next s1.next))
(define-fun nxt10 () Bool (! s2 :next s2.next))
(define-fun nxt11 () Bool (! s3 :next s3.next))
(define-fun nxt12 () Bool (! s4 :next s4.next))
(define-fun nxt13 () Bool (! s5 :next s5.next))
(define-fun nxt14 () Bool (! n8 :next n8.next))
(define-fun nxt15 () Bool (! n9 :next n9.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 ((x0 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not s0) (not s0.next)))
(define-fun d2 ((s0 Bool)) Bool (not s0))
(define-fun d3 ((s1 Bool)) Bool (not s1))
(define-fun d4 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d5 ((s1 Bool)) Bool (not s1))
(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n9 Int) (n9.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n9.next (+ n9 1))))
(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n9 Int) (n9.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n9.next n9)))
(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (n9 Int) (s1.next Bool) (n9.next Int)) Bool (and (d4 x0 s1 s1.next) (or (d6 x0 x1 x2 x3 x4 x5 x6 x7 n9 n9.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 n9 n9.next))))
(define-fun d9 ((s1 Bool)) Bool (not s1))
(define-fun d10 ((x0 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not s1) (not s1.next)))
(define-fun d11 ((s1 Bool)) Bool (not s1))
(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n8 Int) (n8.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n8.next (+ n8 1))))
(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n8 Int) (n8.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n8.next n8)))
(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (n8 Int) (s1.next Bool) (n8.next Int)) Bool (and (d10 x0 s1 s1.next) (or (d12 x0 x1 x2 x3 x4 x5 x6 x7 n8 n8.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 n8 n8.next))))
(define-fun d15 ((s1 Bool)) Bool (not s1))
(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s1.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) x4 x5 x6 x7 (not s1) s1.next))
(define-fun d17 ((s1 Bool)) Bool s1)
(define-fun d18 ((s1 Bool) (s2 Bool)) Bool (and (not s2) (d9 s1)))
(define-fun d19 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (n8.next Int)) Bool (and (not s2) (not s2.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s1 n8 s1.next n8.next)))
(define-fun d20 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (n8.next Int)) Bool (and s2 s2.next (d16 x0 x1 x2 x3 x4 x5 x6 x7 s1 s1.next) (= n8 n8.next)))
(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (n8.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s2) s2.next (d11 s1) (d15 s1.next) (= n8 n8.next)))
(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (n8.next Int)) Bool (or (d19 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 n8 s1.next s2.next n8.next) (d20 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 n8 s1.next s2.next n8.next) (d21 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 n8 s1.next s2.next n8.next)))
(define-fun d23 ((s1 Bool) (s2 Bool)) Bool (and s2 (d17 s1)))
(define-fun d24 ((s3 Bool)) Bool (not s3))
(define-fun d25 ((x0 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x7) (not s3) (not s3.next)))
(define-fun d26 ((x0 Bool) (x6 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x6) (not s3) (not s3.next)))
(define-fun d27 ((x0 Bool) (x5 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x5) (not s3) (not s3.next)))
(define-fun d28 ((x0 Bool) (x4 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x4) (not s3) (not s3.next)))
(define-fun d29 ((x0 Bool) (x3 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3) (not s3.next)))
(define-fun d30 ((x0 Bool) (x2 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x2) (not s3) (not s3.next)))
(define-fun d31 ((x0 Bool) (x1 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not s3) (not s3.next)))
(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d25 x0 x7 s3 s3.next) (d26 x0 x6 s3 s3.next) (d27 x0 x5 s3 s3.next) (d28 x0 x4 s3 s3.next) (d29 x0 x3 s3 s3.next) (d30 x0 x2 s3 s3.next) (d31 x0 x1 s3 s3.next)))
(define-fun d33 ((s3 Bool)) Bool (not s3))
(define-fun d34 ((s3 Bool)) Bool (not s3))
(define-fun d35 ((x0 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not s3) s3.next))
(define-fun d36 ((s3 Bool)) Bool s3)
(define-fun d37 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d24 s3)))
(define-fun d38 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) (not s4.next) (d32 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))
(define-fun d39 ((x0 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 s4.next (d35 x0 s3 s3.next)))
(define-fun d40 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s4) s4.next (d33 s3) (d34 s3.next)))
(define-fun d41 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d38 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d39 x0 s3 s4 s3.next s4.next) (d40 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))
(define-fun d42 ((s3 Bool) (s4 Bool)) Bool (and s4 (d36 s3)))
(define-fun d43 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d18 s1 s2) (d37 s3 s4)))
(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (n8.next Int)) Bool (or (d22 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 n8 s1.next s2.next n8.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= n8 n8.next))))
(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d41 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3 s3.next) (= s4 s4.next))))
(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n8 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n8.next Int)) Bool (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 n8 s1.next s2.next n8.next) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))
(define-fun d47 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d23 s1 s2) (d42 s3 s4)))
(define-fun d48 ((s1 Bool) (s5 Bool)) Bool (and (not s5) (d3 s1)))
(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s5 Bool) (n8 Int) (n9 Int) (s1.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (and (not s5) (not s5.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s1 n9 s1.next n9.next) (= n8 n8.next)))
(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n8 Int) (n9 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (and s5 s5.next (d46 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 n8 s1.next s2.next s3.next s4.next n8.next) (= n9 n9.next)))
(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s5 Bool) (n8 Int) (n9 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s5) s5.next (d5 s1) (d43 s1.next s2.next s3.next s4.next) (= n8 n8.next) (= n9 n9.next)))
(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n8 Int) (n9 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (or (d49 x0 x1 x2 x3 x4 x5 x6 x7 s1 s5 n8 n9 s1.next s5.next n8.next n9.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s5 n8 n9 s1.next s2.next s3.next s4.next s5.next n8.next n9.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s1 s5 n8 n9 s1.next s2.next s3.next s4.next s5.next n8.next n9.next)))
(define-fun d53 ((s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and s5 (d47 s1 s2 s3 s4)))
(define-fun d54 ((s0 Bool) (s1 Bool) (s5 Bool)) Bool (and (d0 s0) (d48 s1 s5)))
(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 s0 s0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0 s0.next))))
(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n8 Int) (n9 Int) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s5 n8 n9 s1.next s2.next s3.next s4.next s5.next n8.next n9.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s1 s1.next) (= s2 s2.next) (= s3 s3.next) (= s4 s4.next) (= s5 s5.next) (= n8 n8.next) (= n9 n9.next))))
(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (n8 Int) (n9 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (n8.next Int) (n9.next Int)) Bool (and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s1 s2 s3 s4 s5 n8 n9 s1.next s2.next s3.next s4.next s5.next n8.next n9.next)))
(define-fun d58 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool)) Bool (and (d2 s0) (d53 s1 s2 s3 s4 s5)))
;
;
(define-fun I () Bool (! (d54 s0 s1 s5) :init true))
(define-fun T () Bool (! (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 n8 n9 s0.next s1.next s2.next s3.next s4.next s5.next n8.next n9.next) :trans true))
(define-fun O () Bool (! (not (d58 s0 s1 s2 s3 s4 s5)) :invar-property 0))
