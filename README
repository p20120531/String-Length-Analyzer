class DGMgr {
   vector<DG*> _dgList;
   public :
      void parse(sting filename);
};
class DG {
   Node* _sink;
   public:
      # postorder traversal of the dependency graph
      Node* successor();
      Node* getSinkNode();
};
class Node{
   # for binary operator '=' , the two children is merged as one node 
   # with _name == leftChild , _operator == rightChild
   # ex : (= T1_2 (str.++ T2_2 T3_2)) => single node with 
   #      _name == T1_2 , _operator == str.++ , _children == [T2_2,T3_2]

   # for operator with boolean return type such as 'not' and 'str.in.re' ... etc , new name is introduced
   # ex : (not (str.in.re X1 R1)) => two nodes with 
          (bottum-up construction)
          _name1 == NEW1 , _operator == str.in.re , _children = [X1,R1]
          _name2 == NEW2 , _operator == not , _children = [NEW1]
   
   Type          _operator;
   string        _name;
   string        _regex;
   vector<Node*> _children; 
    
   public :
      getTypeByName(string);
};

supported operation    corresponding automaton operation    currently suporrted
   str.++               concate                               Y
   str.len              collect at sinkNode                   Y
   str.replace          replace                               Y
   str.substr           substr
   str.prefixof         prefix
   str.suffixof         suffix
   str.in.re            intersection                          Y
   str.to.re            the corresponding automaton           Y
   re.++                concate                               Y
   re.union             union                                 Y
   re.inter             intersection                          Y
   re.*                 Kleene star
   re.+                 plus

using 8-bit to encode ASCII as alphabet
reserve 0000 0000 epsilon 
        0000 0001 <
        0000 0010 >
