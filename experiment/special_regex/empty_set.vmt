(declare-fun x0 () Bool)
(declare-fun x1 () Bool)
(declare-fun x2 () Bool)
(declare-fun x3 () Bool)
(declare-fun x4 () Bool)
(declare-fun x5 () Bool)
(declare-fun x6 () Bool)
(declare-fun x7 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
;
(define-fun d0 () Bool (! x0 :next x0.next))
(define-fun d1 () Bool (! x1 :next x1.next))
(define-fun d2 () Bool (! x2 :next x2.next))
(define-fun d3 () Bool (! x3 :next x3.next))
(define-fun d4 () Bool (! x4 :next x4.next))
(define-fun d5 () Bool (! x5 :next x5.next))
(define-fun d6 () Bool (! x6 :next x6.next))
(define-fun d7 () Bool (! x7 :next x7.next))
(define-fun d8 () Bool (! s0 :next s0.next))
;
(define-fun d9 ((s0 Bool)) Bool (not s0))
(define-fun d10 () Bool false)
(define-fun d11 () Bool false)
;
(define-fun I () Bool (! (d9 s0) :init true))
(define-fun T () Bool (! d10 :trans true))
(define-fun O () Bool (! (not d11) :invar-property 0))
