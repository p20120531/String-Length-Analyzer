(declare-fun x0 () Bool)
(declare-fun x1 () Bool)
(declare-fun x2 () Bool)
(declare-fun x3 () Bool)
(declare-fun x4 () Bool)
(declare-fun x5 () Bool)
(declare-fun x6 () Bool)
(declare-fun x7 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
;
(define-fun d0 () Bool (! x0 :next x0.next))
(define-fun d1 () Bool (! x1 :next x1.next))
(define-fun d2 () Bool (! x2 :next x2.next))
(define-fun d3 () Bool (! x3 :next x3.next))
(define-fun d4 () Bool (! x4 :next x4.next))
(define-fun d5 () Bool (! x5 :next x5.next))
(define-fun d6 () Bool (! x6 :next x6.next))
(define-fun d7 () Bool (! x7 :next x7.next))
(define-fun d8 () Bool (! s0 :next s0.next))
;
(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and (not x0) (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))
(define-fun d11 ((s0 Bool) (s0.next Bool)) Bool (and (not s0) s0.next))
(define-fun d12 ((s0 Bool) (s0.next Bool)) Bool (and s0 s0.next))
(define-fun i ((s0 Bool)) Bool (and (not s0)))
(define-fun o ((s0 Bool)) Bool (and (not s0)))
(define-fun t ((s0 Bool) (s0.next Bool)) Bool (or (d11 s0 s0.next) (d12 s0 s0.next)))
;
(define-fun I () Bool (! (i s0) :init true))
(define-fun T () Bool (! (t s0 s0.next) :trans true))
(define-fun O () Bool (! (not (o s0)) :invar-property 0))
